h4.1 <- quap(
alist(
height <- dnorm(mu, sigma),
mu <- a + b*(weight - xbar),
a ~ dnorm(178,20),
b ~ dlnorm(0,1),
sigma ~ dunif(0,50)
),
data = s
)
h4.1 <- quap(
alist(
height <- dnorm(mu, sigma),
mu <- a + b*(weight - xbar),
a ~ dnorm(178,20),
b ~ dlnorm(0,1),
sigma ~ dunif(0,50)
),
data = d
)
#Insepct posterior distribution of parameters:
precis(h4.1)
###Sampling from the posterior:
post <- extract.samples(h4.1)
post
mu_at_weight <- post$a + post$b * ( 50 - xbar )
mu_at_weight
mu <- link( h4.1 , data=data.frame(weight=weights) )
str(mu)
mu
###predict height mu for each of the weights:
post <- extract.samples(h4.1)
post
mu.link <- function(weight) post$a + post$b*( weight - xbar )
weight.seq <- weights
weight.seq <- c(46.95,43.72,64.78,32.59,54.63)
mu <- sapply( weight.seq , mu.link )
mu.mean <- apply( mu , 2 , mean )
mu.CI <- apply( mu , 2 , PI , prob=0.89 )
mu.mean
mu.CI
#######H2:
#select samples with ages <18
d2 <- d[ d$age < 18, ]
xbar <- mean( d2$weight )
##Use the same model as in H1  but lower mean heigh expectation:
h4.2 <- quap(
alist(
height <- dnorm(mu, sigma),
mu <- a + b*(weight - xbar),
a ~ dnorm(150,20),
b ~ dlnorm(0,1),
sigma ~ dunif(0,50)
),
data = d2
)
precis(h4.2)
summary(d2$weight)
weight.seq <- seq(from=4, to=45, length.out = 30) #weight ranges from 4 to 45
post <- extract.samples(h4.3)
post <- extract.samples(h4.2)
mu <- link( h4,2, data = list(weight = weight.seq))
mu <- link( h4.2, data = list(weight = weight.seq))
mu
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI, prob=0.89)
mu.mean
mu.PI
sim.height <- sim( h4.2, data = list(weight = weight.seq ))
sim.height
height.PI <- apply(sim.height, 2, PI, prob=0.89)
height.PI
# plot raw data
plot( height ~ weight , d2 , col=col.alpha(rangi2,0.5) )
# draw MAP line
lines( weight.seq , mu.mean )
# draw HPDI region for line
shade( mu.HPDI , weight.seq )
# draw PI region for simulated heights
shade( height.PI , weight.seq )
# draw HPDI region for line
shade( mu,PI , weight.seq )
# draw HPDI region for line
shade( mu.PI , weight.seq )
library(rethinking)
###################
#######H2:
##################
#select samples with ages <18
d2 <- d[ d$age < 18, ]
library(rethinking)
#1:
########
#Load !Kung data:
library(rethinking)
data(Howell1)
d <- Howell1
###################
#######H2:
##################
#select samples with ages <18
d2 <- d[ d$age < 18, ]
xbar <- mean( d2$weight )
mean(d2$height)
###SECTION A:
##Use the same model as in H1  but lower mean height expectation:
h4.2 <- quap(
alist(
height <- dnorm(mu, sigma),
mu <- a + b*(weight - xbar),
a ~ dnorm(110,20),
b ~ dlnorm(0,1),
sigma ~ dunif(0,50)
),
data = d2
)
precis(h4.2)
#Sample from the posterior
weight.seq <- seq(from=4, to=45, length.out = 30) #weight ranges from 4 to 45
post <- extract.samples(h4.2) #each row = line
post
post[1:,1:3]
post[1:5,1:3]
#predict mu
mu <- link( h4.2, data = list(weight = weight.seq))
mu
mu[1:10,1:10]
mu[1:10,1:5]
mu.mean <- apply(mu, 2, mean)
mu.mean
mu.mean
mu.PI <- apply(mu, 2, PI, prob=0.89)
mu.PI
#89% prediction interval (takes into account uncertaintly around sigma)
sim.height <- sim( h4.2, data = list(weight = weight.seq ))
sim.height
sim.height[1:5,1:5]
sim.height[1:5,1:3]
sim.height[1:5,1:5]
height.PI <- apply(sim.height, 2, PI, prob=0.89)
height.PI[1:5,1:5]
height.PI
# plot raw data
plot( height ~ weight , d2 , col=col.alpha(rangi2,0.5) )
# draw MAP line
lines( weight.seq , mu.mean )
# draw HPDI region for line
shade( mu.PI , weight.seq )
# draw PI region for simulated heights
shade( height.PI , weight.seq )
library(rethinking)
#1:
########
#Load !Kung data:
library(rethinking)
data(Howell1)
d <- Howell1
###################
#######H2:
##################
#select samples with ages <18
d2 <- d[ d$age < 18, ]
#define the average weight
xbar <- mean( d2$weight )
###########
#SECTION A:
###########
##Use the same model as in H1  but lower mean height expectation:
h4.2 <- quap(
alist(
height <- dnorm(mu, sigma),
mu <- a + b*(weight - xbar),
a ~ dnorm(110,20),
b ~ dlnorm(0,1),
sigma ~ dunif(0,50)
),
data = d2
)
precis(h4.2)
#Sample from the posterior
weight.seq <- seq(from=4, to=45, length.out = 30) #weight ranges from 4 to 45
post <- extract.samples(h4.2) #each row = line
post[1:5,1:3]
#predict mu for each weight point
mu <- link( h4.2, data = list(weight = weight.seq))
mu[1:10,1:5]
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI, prob=0.89)
#89% prediction interval (takes into account uncertaintly around sigma)
sim.height <- sim( h4.2, data = list(weight = weight.seq ))
sim.height[1:5,1:5]
height.PI <- apply(sim.height, 2, PI, prob=0.89)
height.PI
# plot raw data
plot( height ~ weight , d2 , col=col.alpha(rangi2,0.5) )
# draw MAP line
lines( weight.seq , mu.mean )
# draw HPDI region for line
shade( mu.PI , weight.seq )
# draw PI region for simulated heights
shade( height.PI , weight.seq )
library(rethinking)
#1:
########
#Load !Kung data:
library(rethinking)
data(Howell1)
d <- Howell1
View(d)
###Load required packages:
library(Seurat)
library(dplyr)
library(cowplot)
library(GSVA)
library(umap)
library(ggplot2)
##########################################################################
###Quiescence scoring
setwd("~/Documents/Dormancy_PhD_project_data/scRNA_seq_treatment_response_data/GSE149383/GSE134838_RAW/")
load("seurat_expr.RData")
##Load quiescence marker genes
setwd("~/Documents/GitHub/CancerDormancy/Data/DormancyGeneList/")
load("upregulated_common.RData")
load("downregulated_common.RData")
quiescence_genes <- c(downregulated_common, upregulated_common)
expr.data <- data.frame(expr.data)
expr.data <- expr.data[rownames(expr.data) %in% quiescence_genes,]
gene_lists <- list(upregulated_common, downregulated_common)
expr.data <- as.matrix(expr.data)
es.dif <- gsva(expr.data, gene_lists, method = "zscore", verbose = FALSE, parallel.sz=1)
es.dif <- t(es.dif)
es.dif <- data.frame(es.dif)
es.dif$Common_score <- es.dif$X1 - es.dif$X2
z_scores <- es.dif
z_scores$X1 <- NULL
z_scores$X2 <- NULL
#Save quiescence scores:
setwd("~/Documents/GitHub/CancerDormancy/Prognosis_and_treatment_response_analysis/Results/")
save(z_scores, file = "GSE134838_QS.RData")
QS <- z_scores
QS$X1 <- NULL
QS$X2 <- NULL
#Save quiescence scores:
setwd("~/Documents/GitHub/CancerDormancy/Prognosis_and_treatment_response_analysis/Results/")
save(z_scores, file = "GSE134838_QS.RData")
###########################################
####UMAP:
QS$Day <- sapply(QS$SampleID, function(x)
strsplit(x,"_")[[1]][1])
View(QS)
###########################################
####UMAP:
QS$SampleID <- rownames(QS)
QS$Day <- sapply(QS$SampleID, function(x)
strsplit(x,"_")[[1]][1])
######
#DAY0
D0_samples <- QS[QS$Day %in% "D0",]
D0_samples <- as.character(D0_samples$SampleID)
umap.expr <- expr.data[,colnames(expr.data) %in% D0_samples]
umap.expr <- umap.expr[rownames(umap.expr) %in% c(downregulated_common, upregulated_common),]
umap.expr <- as.matrix(t(umap.expr))
common.umap = umap(umap.expr, random_state=123)
common.umap$layout
##This is the matrix with cooridnates
UMAP_coordinates <- data.frame(common.umap$layout)
colnames(UMAP_coordinates) <- c("UMAP1","UMAP2")
UMAP_coordinates$Sample <- rownames(UMAP_coordinates)
UMAP_coordinates_D0 <- UMAP_coordinates
UMAP_coordinates_D0$Day <- "Day 0"
######
#DAY3
D3_samples <- QS[QS$Day %in% "D3",]
D3_samples <- as.character(D3_samples$SampleID)
umap.expr <- expr.data[,colnames(expr.data) %in% D3_samples]
umap.expr <- umap.expr[rownames(umap.expr) %in% c(downregulated_common, upregulated_common),]
umap.expr <- as.matrix(t(umap.expr))
common.umap = umap(umap.expr, random_state=123)
common.umap$layout
##This is the matrix with cooridnates
UMAP_coordinates <- data.frame(common.umap$layout)
colnames(UMAP_coordinates) <- c("UMAP1","UMAP2")
UMAP_coordinates$Sample <- rownames(UMAP_coordinates)
UMAP_coordinates_D3 <- UMAP_coordinates
UMAP_coordinates_D3$Day <- "Day 3"
######
#Plot UMAP coordiantes together:
UMAP_coordinates <- rbind(UMAP_coordinates_D0, UMAP_coordinates_D3)
UMAP_coordinates <- merge(UMAP_coordinates, QS,
by.x = "Sample", by.y = "SampleID")
UMAP_coordinates$Day <- UMAP_coordinates$Day.x
UMAP_coordinates$QuiescenceScore <- UMAP_coordinates$Common_score
setwd("~/Documents/GitHub/CancerDormancy/Prognosis_and_treatment_response_analysis/Figures")
setwd("~/Documents/GitHub/CancerDormancy/Prognosis_and_treatment_response_analysis/Figures")
pdf("GSE134833_UMAP.pdf", height = 4, width = 8)
ggplot(UMAP_coordinates, aes(x=UMAP1, y=UMAP2, colour = QuiescenceScore)) +
geom_point() +
scale_color_gradient2(low = "#59ac53", midpoint = 0,mid = "grey95", high = "#8b5aa8") + theme_classic() + facet_wrap(~Day)
dev.off()
pdf("GSE134838_UMAP.pdf", height = 4, width = 8)
ggplot(UMAP_coordinates, aes(x=UMAP1, y=UMAP2, colour = QuiescenceScore)) +
geom_point() +
scale_color_gradient2(low = "#59ac53", midpoint = 0,mid = "grey95", high = "#8b5aa8") + theme_classic() + facet_wrap(~Day)
dev.off()
#############################
#Percentage of quiescent cells in each condition:
QS$CellStatus <- sapply(es.dif$GSVA_score, function(x)
ifelse(x < 0, "Proliferating","Quiescent"))
#############################
#Percentage of quiescent cells in each condition:
QS$CellStatus <- sapply(QS$Common_score, function(x)
ifelse(x < 0, "Proliferating","Quiescent"))
table(QS$Day)
Days <- c(0,0,3,3)
CellStatus <- c("Proliferating","Quiescent","Proliferating","Quiescent")
N <- NULL
for (i in c(0,3)) {
print(i)
test <- QS[QS$Day %in% i,]
test <- table(test$CellStatus)
n <- test[1]
N <- c(N,n)
n <- test[2]
N <- c(N,n)
}
Summary <- data.frame(Days, CellStatus, N)
Summary$Days <- as.factor(Summary$Days)
pdf("GSE134838_barplot_cell_composition.pdf", height = 5, width = 4)
p <- ggplot(Summary, aes(fill=CellStatus, y=N, x=Days, width = 0.75)) +
geom_bar(stat = "identity", position = "fill") + theme_classic()
p + rotate_x_text(45) + scale_fill_manual(values = c("#666666", "#D95F02"))
dev.off()
p <- ggplot(Summary, aes(fill=CellStatus, y=N, x=Days, width = 0.75)) +
geom_bar(stat = "identity", position = "fill") + theme_classic()
p + rotate_x_text(45) + scale_fill_manual(values = c("#666666", "#D95F02"))
library(ggpubr)
pdf("GSE134838_barplot_cell_composition.pdf", height = 5, width = 4)
p <- ggplot(Summary, aes(fill=CellStatus, y=N, x=Days, width = 0.75)) +
geom_bar(stat = "identity", position = "fill") + theme_classic()
p + rotate_x_text(45) + scale_fill_manual(values = c("#666666", "#D95F02"))
dev.off()
View(Summary)
i <- 0
print(i)
test <- QS[QS$Day %in% i,]
table(QS$Day)
N <- NULL
for (i in c('D0',"D3")) {
print(i)
test <- QS[QS$Day %in% i,]
test <- table(test$CellStatus)
n <- test[1]
N <- c(N,n)
n <- test[2]
N <- c(N,n)
}
Summary <- data.frame(Days, CellStatus, N)
Summary$Days <- as.factor(Summary$Days)
pdf("GSE134838_barplot_cell_composition.pdf", height = 5, width = 4)
p <- ggplot(Summary, aes(fill=CellStatus, y=N, x=Days, width = 0.75)) +
geom_bar(stat = "identity", position = "fill") + theme_classic()
p + rotate_x_text(45) + scale_fill_manual(values = c("#666666", "#D95F02"))
dev.off()
library(umap)
library(ggpubr)
################
#Load the data:
setwd("~/Documents/Dormancy_PhD_project_data/scRNA_seq_treatment_response_data/GSE149383/GSE134836_RAW/")
D0 <- Read10X(data.dir = "~/Documents/Dormancy_PhD_project_data/scRNA_seq_treatment_response_data/GSE149383/GSE134836_RAW/D0/")
#Data can be downloaded from GEO using accession code GSE134836
################
#Set up a seurat object:
lc.data <- CreateSeuratObject(counts = D0, min.cells = 3, min.features  = 200, project = "PC9_longitudinal", assay = "RNA")
##########################################################################
###Quiescence scoring
#Combine expression data matrices:
setwd("~/Documents/Dormancy_PhD_project_data/scRNA_seq_treatment_response_data/GSE149383/GSE134836_RAW/")
##########################################################################
###Quiescence scoring
#Combine expression data matrices:
load("seurat_expr_D0.RData")
D0 <- data.frame(expr.data)
load("seurat_expr_D3.RData")
D3 <- data.frame(expr.data)
##########
##Change colnames to reflect condition:
#D0:
names <- as.character(1:7000)
names <- paste("D0_", names,sep = "")
colnames(D0) <- names
D0$GENE <- rownames(D0)
#D3:
names <- as.character(1:8235)
names <- paste("D3_", names,sep = "")
colnames(D3) <- names
D3$GENE <- rownames(D3)
##################
#Merge the datasets:
count.data <- merge(D0,D3,
by.x = "GENE",by.y = "GENE")
#Clean up:
rownames(count.data) <- count.data$GENE
count.data$GENE <- NULL
##Load quiescence marker genes
setwd("~/Documents/GitHub/CancerDormancy/Data/DormancyGeneList/")
load("upregulated_common.RData")
load("downregulated_common.RData")
quiescence_genes <- c(downregulated_common, upregulated_common)
count.data <- count.data[rownames(count.data) %in% quiescence_genes,]
##Calculting quiescence scores:
gene_lists <- list(upregulated_common, downregulated_common)
expr.data <- as.matrix(count.data)
es.dif <- gsva(expr.data, gene_lists, method = "zscore", verbose = FALSE, parallel.sz=1)
es.dif <- t(es.dif)
es.dif <- data.frame(es.dif)
es.dif$Common_score <- es.dif$X1 - es.dif$X2
z_scores <- es.dif
z_scores$X1 <- NULL
z_scores$X2 <- NULL
QS <- z_scores
QS$X1 <- NULL
QS$X2 <- NULL
QS$SampleID <- rownames(QS)
QS$Day <- sapply(QS$SampleID, function(x)
strsplit(x,"_")[[1]][1])
setwd("~/Documents/GitHub/CancerDormancy/Prognosis_and_treatment_response_analysis/Results")
setwd("~/Documents/GitHub/CancerDormancy/Prognosis_and_treatment_response_analysis/Results")
save(QS, file = "GSE134836_QS.RData")
###########################################
####UMAP:
expr.data <- count.data
######
#DAY0
D0_samples <- QS[QS$Day %in% "D0",]
D0_samples <- as.character(D0_samples$SampleID)
umap.expr <- expr.data[,colnames(expr.data) %in% D0_samples]
umap.expr <- umap.expr[rownames(umap.expr) %in% c(downregulated_common, upregulated_common),]
umap.expr <- as.matrix(t(umap.expr))
common.umap = umap(umap.expr, random_state=123)
common.umap$layout
##This is the matrix with cooridnates
UMAP_coordinates <- data.frame(common.umap$layout)
colnames(UMAP_coordinates) <- c("UMAP1","UMAP2")
UMAP_coordinates$Sample <- rownames(UMAP_coordinates)
UMAP_coordinates_D0 <- UMAP_coordinates
UMAP_coordinates_D0$Day <- "Day 0"
######
#DAY3
D3_samples <- QS[QS$Day %in% "D3",]
D3_samples <- as.character(D3_samples$SampleID)
umap.expr <- expr.data[,colnames(expr.data) %in% D3_samples]
umap.expr <- umap.expr[rownames(umap.expr) %in% c(downregulated_common, upregulated_common),]
umap.expr <- as.matrix(t(umap.expr))
common.umap = umap(umap.expr, random_state=123)
common.umap$layout
##This is the matrix with cooridnates
UMAP_coordinates <- data.frame(common.umap$layout)
colnames(UMAP_coordinates) <- c("UMAP1","UMAP2")
UMAP_coordinates$Sample <- rownames(UMAP_coordinates)
UMAP_coordinates_D3 <- UMAP_coordinates
UMAP_coordinates_D3$Day <- "Day 3"
###
#Plot the plots the plots together
UMAP_coordinates <- rbind(UMAP_coordinates_D0, UMAP_coordinates_D3)
UMAP_coordinates <- merge(UMAP_coordinates, QS,
by.x = "Sample", by.y = "SampleID")
#############################
#Percentage of quiescent cells in each condition:
##########
#Summarise the data:
QS$CellStatus <- sapply(QS$GSVA_score, function(x)
ifelse(x < 0, "Proliferating","Quiescent"))
#############################
#Percentage of quiescent cells in each condition:
##########
#Summarise the data:
QS$CellStatus <- sapply(QS$Common_score, function(x)
ifelse(x < 0, "Proliferating","Quiescent"))
table(QS$Day)
Days <- c(0,0,3,3)
CellStatus <- c("Proliferating","Quiescent","Proliferating","Quiescent")
N <- NULL
N <- NULL
for (i in c("D0","D3")) {
print(i)
test <- QS[QS$Day %in% i,]
test <- table(test$CellStatus)
n <- test[1]
N <- c(N,n)
n <- test[2]
N <- c(N,n)
}
Summary <- data.frame(Days, CellStatus, N)
Summary$Days <- as.factor(Summary$Days)
UMAP_coordinates$Day <- UMAP_coordinates$Day.x
UMAP_coordinates$QuiescenceScore <- UMAP_coordinates$Common_score
library(ggplot2)
setwd("~/Documents/GitHub/CancerDormancy/Prognosis_and_treatment_response_analysis/Figures")
setwd("~/Documents/GitHub/CancerDormancy/Prognosis_and_treatment_response_analysis/Figures")
pdf("GSE134836_UMAP.pdf", height = 4, width = 8)
ggplot(UMAP_coordinates, aes(x=UMAP1, y=UMAP2, colour = QuiescenceScore)) +
geom_point() +
scale_color_gradient2(low = "#59ac53", midpoint = 0,mid = "grey95", high = "#8b5aa8") + theme_classic() + facet_wrap(~Day)
dev.off()
View(Summary)
Summary <- data.frame(Days, CellStatus, N)
Summary$Days <- as.factor(Summary$Days)
pdf("GSE134836_barplot_cell_composition.pdf", height = 5, width = 4)
p <- ggplot(Summary, aes(fill=CellStatus, y=N, x=Days, width = 0.75)) +
geom_bar(stat = "identity", position = "fill") + theme_classic()
p + rotate_x_text(45) + scale_fill_manual(values = c("#666666", "#D95F02"))
dev.off()
