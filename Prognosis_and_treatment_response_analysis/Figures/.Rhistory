############################################################################
##Mutational predictor score:
############################################################################
###########################################################################
#Load clinical information and clean up:
###########################################################################
setwd("~/Documents/Dormancy_PhD_project/GenePanel/SurvivalAnalysis/Data/")
clinical.data <- read.csv("combined_study_clinical_data.csv", header = TRUE)
columns_of_interest <- c("Patient.ID","Sample.ID","Sample.Type","Diagnosis.Age","Neoplasm.Disease.Stage.American.Joint.Committee.on.Cancer.Code","Cancer.Type",
"TCGA.PanCanAtlas.Cancer.Type.Acronym","Disease.Free..Months.","Disease.Free.Status","Months.of.disease.specific.survival",
"Disease.specific.Survival.status","Neoadjuvant.Therapy.Type.Administered.Prior.To.Resection.Text","MSI.MANTIS.Score",
"MSIsensor.Score","Mutation.Count","New.Neoplasm.Event.Post.Initial.Therapy.Indicator","Overall.Survival..Months.",
"Overall.Survival.Status","Progress.Free.Survival..Months.","Progression.Free.Status","Radiation.Therapy",
"Sex","Neoplasm.Disease.Lymph.Node.Stage.American.Joint.Committee.on.Cancer.Code","American.Joint.Committee.on.Cancer.Metastasis.Stage.Code","American.Joint.Committee.on.Cancer.Tumor.Stage.Code",
"Primary.Lymph.Node.Presentation.Assessment","Aneuploidy.Score")
clinical.data <- clinical.data[,colnames(clinical.data) %in% columns_of_interest]
#Make sure that each patient has only one entry and only primary tumour samples are included:
clinical.data <- clinical.data[clinical.data$Sample.Type %in% "Primary",]
rownames(clinical.data) <- clinical.data$Patient.ID
####Load input data with quiescence scores and TCGA mutational information:
#Load the cleaned data
setwd("~/Documents/Dormancy_PhD_project_data/Quiescence_predictor_model/Elastic_net_regression_purity_scaled/v2/input/")
load("input_data_cleaned.RData")
Merged_data$PatientID <- sapply(Merged_data$SampleID, function(x)
paste(strsplit(x,"-")[[1]][1:3],collapse="-"))
clinical.data <- merge(clinical.data, Merged_data,
by.x = "Patient.ID", by.y= "PatientID")
#####################################################
#########Patient Response:
#####################################################
#Load information about treatment:
setwd("~/Documents/Dormancy_PhD_project_data/TCGA_clinical_data/Drug_treatment_data")
load("combined_drug_treatment_data.RData")
table(combined_data$measure_of_response)
complete.response.patients <- combined_data[combined_data$measure_of_response %in% "Complete Response",]
complete.response.patients <- unique(as.character(complete.response.patients$bcr_patient_barcode))
incomplete.response <- combined_data[combined_data$measure_of_response %in% c("Clinical Progressive Disease","Stable Disease","Partial Response"),]
incomplete.response <- unique(as.character(incomplete.response$bcr_patient_barcode))
clinical.data$Patient.ID <- as.character(clinical.data$Patient.ID)
clinical.data$Measure_of_response <- sapply(clinical.data$Patient.ID, function(x)
ifelse(x %in% complete.response.patients, 1,
ifelse(x %in% incomplete.response, 0,3)))
clinical.data <- clinical.data[clinical.data$Measure_of_response %in% c(1,0),]
table(clinical.data$Measure_of_response)
clinical.data$Measure_of_response <- sapply(clinical.data$Measure_of_response, function(x)
ifelse(x %in% 1, "Complete Response","Other"))
##########################################
#Calculate mutational score
##########################################
setwd("~/Documents/Dormancy_PhD_project_data/Quiescence_predictor_model/Elastic_net_regression_purity_scaled/v2/output_summary")
load("intercept.RData")
load("coefficients.RData")
Patients <- as.character(clinical.data$Patient.ID)
Features <- coefficients$features
MutationalScore <- NULL
for (i in 1:813) {
print(i)
setwd("~/Documents/Dormancy_PhD_project_data/Quiescence_predictor_model/Elastic_net_regression_purity_scaled/v2/output_summary")
load("intercept.RData")
PatientData <- clinical.data[i,]
score <- mean_intercept
for (a in Features) {
print(a)
load("coefficients.RData")
coefficients <- coefficients[coefficients$features %in% a,]
coefficients <- coefficients$coefficients
feature_value <- PatientData[[a]]
feature_value <- feature_value * coefficients
score <- score + feature_value
}
MutationalScore <- c(MutationalScore, score)
}
clinical.data$MutationalScore <- MutationalScore
############################################################################
##TCGA transcriptome predictor score:
############################################################################
###########################################################################
#Load clinical information and clean up:
###########################################################################
setwd("~/Documents/Dormancy_PhD_project/GenePanel/SurvivalAnalysis/Data/")
clinical.data <- read.csv("combined_study_clinical_data.csv", header = TRUE)
columns_of_interest <- c("Patient.ID","Sample.ID","Sample.Type","Diagnosis.Age","Neoplasm.Disease.Stage.American.Joint.Committee.on.Cancer.Code","Cancer.Type",
"TCGA.PanCanAtlas.Cancer.Type.Acronym","Disease.Free..Months.","Disease.Free.Status","Months.of.disease.specific.survival",
"Disease.specific.Survival.status","Neoadjuvant.Therapy.Type.Administered.Prior.To.Resection.Text","MSI.MANTIS.Score",
"MSIsensor.Score","Mutation.Count","New.Neoplasm.Event.Post.Initial.Therapy.Indicator","Overall.Survival..Months.",
"Overall.Survival.Status","Progress.Free.Survival..Months.","Progression.Free.Status","Radiation.Therapy",
"Sex","Neoplasm.Disease.Lymph.Node.Stage.American.Joint.Committee.on.Cancer.Code","American.Joint.Committee.on.Cancer.Metastasis.Stage.Code","American.Joint.Committee.on.Cancer.Tumor.Stage.Code",
"Primary.Lymph.Node.Presentation.Assessment","Aneuploidy.Score")
clinical.data <- clinical.data[,colnames(clinical.data) %in% columns_of_interest]
#Make sure that each patient has only one entry and only primary tumour samples are included:
clinical.data <- clinical.data[clinical.data$Sample.Type %in% "Primary",]
rownames(clinical.data) <- clinical.data$Patient.ID
#Load quiescence scores and mutation rates
setwd("~/Documents/Dormancy_PhD_project/Pancancer_quiescence_score_scaling_by_purity/Scores/Scores_scaled_by_purity/")
load("Combined_z_score_scaled_by_purity.RData")
z_score$PatientID <- sapply(rownames(z_score), function(x)
paste(strsplit(x,"-")[[1]][1:3],collapse="-"))
clinical.data <- merge(clinical.data, z_score,
by.x = "Patient.ID", by.y= "PatientID")
#####################################################
#########Patient Response:
#####################################################
#Load information about treatment:
setwd("~/Documents/Dormancy_PhD_project_data/TCGA_clinical_data/Drug_treatment_data")
load("combined_drug_treatment_data.RData")
table(combined_data$measure_of_response)
complete.response.patients <- combined_data[combined_data$measure_of_response %in% "Complete Response",]
complete.response.patients <- unique(as.character(complete.response.patients$bcr_patient_barcode))
incomplete.response <- combined_data[combined_data$measure_of_response %in% c("Clinical Progressive Disease","Stable Disease","Partial Response"),]
incomplete.response <- unique(as.character(incomplete.response$bcr_patient_barcode))
clinical.data$Patient.ID <- as.character(clinical.data$Patient.ID)
clinical.data$Measure_of_response <- sapply(clinical.data$Patient.ID, function(x)
ifelse(x %in% complete.response.patients, 1,
ifelse(x %in% incomplete.response, 0,3)))
clinical.data <- clinical.data[clinical.data$Measure_of_response %in% c(1,0),]
table(clinical.data$Measure_of_response)
clinical.data$Measure_of_response <- sapply(clinical.data$Measure_of_response, function(x)
ifelse(x %in% 1, "Complete Response","Other"))
setwd("~/Documents/Dormancy_PhD_project/TCGA_mutational_predictor_score/Transcriptome")
#Pancancer comparison:
my_comparisons <- list( c("Complete Response","Other"))
test.data <- clinical.data
test.data$"Measure of response" <- test.data$Measure_of_response
test.data$`Measure of response` <- factor(test.data$`Measure of response`, levels = c("Complete Response","Other"))
p <- ggboxplot(test.data, x = "Measure of response", y = "z_score",
color = "Measure of response") + ylab("Quiescence Score")
pdf("Treament_response_pancancer.pdf",height = 5, width = 5)
print(p + stat_compare_means())
dev.off()
#Select cancer types where there are at least 5 patients in each category:
remove.cancers <- c("ACC","CHOL",'GBM',"KICH","KIRC","KIRP","LIHC","MESO","OV","THYM","PCPG","SKCM","THCA")
clinical.data <- clinical.data[!(clinical.data$TCGA.PanCanAtlas.Cancer.Type.Acronym %in% remove.cancers),]
CT <- unique(as.character(clinical.data$TCGA.PanCanAtlas.Cancer.Type.Acronym))
setwd("~/Documents/Dormancy_PhD_project/TCGA_mutational_predictor_score/Transcriptome")
library(ggpubr)
for (i in CT) {
print(i)
my_comparisons <- list( c("Complete Response","Other"))
test.data <- clinical.data[clinical.data$TCGA.PanCanAtlas.Cancer.Type.Acronym %in% i,]
test.data$"Measure of response" <- test.data$Measure_of_response
test.data$`Measure of response` <- factor(test.data$`Measure of response`, levels = c("Complete Response","Other"))
p <- ggboxplot(test.data, x = "Measure of response", y = "z_score",
color = "Measure of response") + ylab("Quiescence Score")
pdf(paste("Treament_response_",i,".pdf",sep = ""),height = 5, width = 5)
print(p + stat_compare_means())
dev.off()
}
setwd("~/Documents/Dormancy_PhD_project/Mutational_predictor_score/TCGA/Transcriptome/")
#Pancancer comparison:
my_comparisons <- list( c("Complete Response","Other"))
test.data <- clinical.data
test.data$"Measure of response" <- test.data$Measure_of_response
test.data$`Measure of response` <- factor(test.data$`Measure of response`, levels = c("Complete Response","Other"))
p <- ggboxplot(test.data, x = "Measure of response", y = "z_score",
color = "Measure of response") + ylab("Quiescence Score")
pdf("Treament_response_pancancer.pdf",height = 5, width = 5)
print(p + stat_compare_means())
dev.off()
#Select cancer types where there are at least 5 patients in each category:
remove.cancers <- c("ACC","CHOL",'GBM',"KICH","KIRC","KIRP","LIHC","MESO","OV","THYM","PCPG","SKCM","THCA")
clinical.data <- clinical.data[!(clinical.data$TCGA.PanCanAtlas.Cancer.Type.Acronym %in% remove.cancers),]
CT <- unique(as.character(clinical.data$TCGA.PanCanAtlas.Cancer.Type.Acronym))
setwd("~/Documents/Dormancy_PhD_project/TCGA_mutational_predictor_score/Transcriptome")
library(ggpubr)
for (i in CT) {
print(i)
my_comparisons <- list( c("Complete Response","Other"))
test.data <- clinical.data[clinical.data$TCGA.PanCanAtlas.Cancer.Type.Acronym %in% i,]
test.data$"Measure of response" <- test.data$Measure_of_response
test.data$`Measure of response` <- factor(test.data$`Measure of response`, levels = c("Complete Response","Other"))
p <- ggboxplot(test.data, x = "Measure of response", y = "z_score",
color = "Measure of response") + ylab("Quiescence Score")
pdf(paste("Treament_response_",i,".pdf",sep = ""),height = 5, width = 5)
print(p + stat_compare_means())
dev.off()
}
###Load required packages:
library(Seurat)
library(dplyr)
library(cowplot)
library(GSVA)
library(data.table)
##Load expression data and annotation (can be downloaded from GEO using GSE149224 accession code)
setwd("~/Documents/Dormancy_PhD_project_data/scRNA_seq_treatment_response_data/GSE149224")
anno <-read.csv("GSE149224_meta.information.csv", header = TRUE)
expr.data <- read.table("GSE149224_RSH.all.txt", header = TRUE,sep = " ")
#Load quiescence biomarker genes
setwd("~/Documents/GitHub/CancerDormancy/Data/DormancyGeneList/")
load("upregulated_common.RData")
load("downregulated_common.RData")
################################
##Quiescence Score Calculation:
################################
gene_lists <- list(upregulated_common, downregulated_common)
expr.data <- as.matrix(expr.data)
library(GSVA)
es.dif <- gsva(expr.data, gene_lists, method = "zscore", verbose = FALSE, parallel.sz=1)
es.dif <- t(es.dif)
es.dif <- data.frame(es.dif)
es.dif$Common_score <- es.dif$X1 - es.dif$X2
z_scores <- es.dif
z_scores$X1 <- NULL
z_scores$X2 <- NULL
View(z_scores)
#Merge with annotation data:
z_scores$SampleID <- rownames(z_scores)
z_scores$SampleID <- gsub('\\.', '-', z_scores$SampleID)
z_scores$SampleID <- gsub('\\X', '', z_scores$SampleID)
all(z_scores$SampleID == anno$X)
anno$QS <- z_scores$Common_score
rownames(anno) <- rownames(z_scores)
anno$SampleID <- rownames(anno)
#Select RKO cells
anno_RKO <- anno[anno$df.gid %in% "RKO",]
anno_RKO <- as.character(rownames(anno_RKO))
expr.data_RKO <- expr.data[,colnames(expr.data) %in% anno_RKO]
#######
#Dose 0
#######
anno_RKO <- anno[anno$df.gid %in% "RKO",]
anno_RKO <- anno_RKO[anno_RKO$dose %in% 0,]
anno_RKO <- as.character(rownames(anno_RKO))
umap.expr <- expr.data_RKO[,colnames(expr.data_RKO) %in% anno_RKO]
umap.expr <- umap.expr[rownames(umap.expr) %in% c(downregulated_common, upregulated_common),]
umap.expr <- as.matrix(t(umap.expr))
library(umap)
common.umap = umap(umap.expr, random_state=123)
common.umap$layout
UMAP_coordinates <- data.frame(common.umap$layout)
colnames(UMAP_coordinates) <- c("UMAP1","UMAP2")
UMAP_coordinates$Sample <- rownames(UMAP_coordinates)
UMAP_coordinates_D0 <- merge(UMAP_coordinates, anno,
by.x = "Sample", by.y = "SampleID")
#######
#Dose 10
#######
anno_RKO <- anno[anno$df.gid %in% "RKO",]
anno_RKO <- anno_RKO[anno_RKO$dose %in% 10,]
anno_RKO <- as.character(rownames(anno_RKO))
umap.expr <- expr.data_RKO[,colnames(expr.data_RKO) %in% anno_RKO]
umap.expr <- umap.expr[rownames(umap.expr) %in% c(downregulated_common, upregulated_common),]
umap.expr <- as.matrix(t(umap.expr))
library(umap)
common.umap = umap(umap.expr, random_state=123)
common.umap$layout
UMAP_coordinates <- data.frame(common.umap$layout)
colnames(UMAP_coordinates) <- c("UMAP1","UMAP2")
UMAP_coordinates$Sample <- rownames(UMAP_coordinates)
UMAP_coordinates_D10 <- merge(UMAP_coordinates, anno,
by.x = "Sample", by.y = "SampleID")
#Dose 50
anno_RKO <- anno[anno$df.gid %in% "RKO",]
anno_RKO <- anno_RKO[anno_RKO$dose %in% 50,]
anno_RKO <- as.character(rownames(anno_RKO))
umap.expr <- expr.data_RKO[,colnames(expr.data_RKO) %in% anno_RKO]
umap.expr <- umap.expr[rownames(umap.expr) %in% c(downregulated_common, upregulated_common),]
umap.expr <- as.matrix(t(umap.expr))
library(umap)
common.umap = umap(umap.expr, random_state=123)
common.umap$layout
##This is the matrix with cooridnates
UMAP_coordinates <- data.frame(common.umap$layout)
colnames(UMAP_coordinates) <- c("UMAP1","UMAP2")
UMAP_coordinates$Sample <- rownames(UMAP_coordinates)
UMAP_coordinates_D50 <- merge(UMAP_coordinates, anno,
by.x = "Sample", by.y = "SampleID")
anno_RKO <- anno[anno$df.gid %in% "RKO",]
anno_RKO <- anno_RKO[anno_RKO$dose %in% 200,]
anno_RKO <- as.character(rownames(anno_RKO))
umap.expr <- expr.data_RKO[,colnames(expr.data_RKO) %in% anno_RKO]
umap.expr <- umap.expr[rownames(umap.expr) %in% c(downregulated_common, upregulated_common),]
umap.expr <- as.matrix(t(umap.expr))
library(umap)
common.umap = umap(umap.expr, random_state=123)
common.umap$layout
##This is the matrix with cooridnates
UMAP_coordinates <- data.frame(common.umap$layout)
colnames(UMAP_coordinates) <- c("UMAP1","UMAP2")
UMAP_coordinates$Sample <- rownames(UMAP_coordinates)
UMAP_coordinates_D200 <- merge(UMAP_coordinates, anno,
by.x = "Sample", by.y = "SampleID")
###Plot combined UMAP plots:
UMAP_coordinates <- rbind(UMAP_coordinates_D0, UMAP_coordinates_D10, UMAP_coordinates_D50, UMAP_coordinates_D200)
setwd("~/Documents/GitHub/CancerDormancy/Prognosis_and_treatment_response_analysis/Figures")
setwd("~/Documents/GitHub/CancerDormancy/Prognosis_and_treatment_response_analysis/Figures")
pdf("GSE149224_UMAP_RKO.pdf", height = 3, width = 9)
ggplot(UMAP_coordinates, aes(x=UMAP1, y=UMAP2, colour = QS)) +
geom_point() +
scale_color_gradient2(low = "#59ac53", midpoint = 0,mid = "grey95", high = "#8b5aa8") + theme_classic() + facet_wrap(~dose,nrow = 1)
dev.off()
#Percentage of cells in quiescence at each dose:
#Summarise the data:
anno$CellStatus <- sapply(anno$QS, function(x)
ifelse(x < 0, "Proliferating","Quiescent"))
table(anno$dose)
table(anno$CellStatus)
Dose <- c(0,0,10,10,50,50,200,200)
i <- 0
CellStatus <- c("Proliferating","Quiescent","Proliferating","Quiescent","Proliferating","Quiescent","Proliferating","Quiescent")
print(i)
test <- test[test$dose %in% i,]
print(i)
test <- anno[anno$df.gid %in% "RKO",]
test <- test[test$dose %in% i,]
test <- table(test$CellStatus)
test
N <- NULL
n <- test[1]
N <- c(N,n)
n <- test[2]
N <- c(N,n)
for (i in c(0,10,50,200)) {
print(i)
test <- anno[anno$df.gid %in% "RKO",]
test <- test[test$dose %in% i,]
test <- table(test$CellStatus)
n <- test[1]
N <- c(N,n)
n <- test[2]
N <- c(N,n)
}
Summary <- data.frame(Dose, CellStatus, N)
N <- NULL
for (i in c(0,10,50,200)) {
print(i)
test <- anno[anno$df.gid %in% "RKO",]
test <- test[test$dose %in% i,]
test <- table(test$CellStatus)
n <- test[1]
N <- c(N,n)
n <- test[2]
N <- c(N,n)
}
Summary <- data.frame(Dose, CellStatus, N)
Summary$Dose <- factor(Summary$Dose, levels = c(0,10,50,200))
pdf("GSE149224_barplot_cell_composition_RKO.pdf", height = 5, width = 4)
p <- ggplot(Summary, aes(fill=CellStatus, y=N, x=Dose, width = 0.75)) +
geom_bar(stat = "identity", position = "fill") + theme_classic()
p + rotate_x_text(45) + scale_fill_manual(values = c("#666666", "#D95F02"))
dev.off()
###Plot combined UMAP plots:
UMAP_coordinates <- rbind(UMAP_coordinates_D0, UMAP_coordinates_D10, UMAP_coordinates_D50, UMAP_coordinates_D200)
setwd("~/Documents/GitHub/CancerDormancy/Prognosis_and_treatment_response_analysis/Figures")
pdf("GSE149224_UMAP_SW480.pdf", height = 3, width = 9)
ggplot(UMAP_coordinates, aes(x=UMAP1, y=UMAP2, colour = QS)) +
geom_point() +
scale_color_gradient2(low = "#59ac53", midpoint = 0,mid = "grey95", high = "#8b5aa8") + theme_classic() + facet_wrap(~dose,nrow = 1)
dev.off()
#Percentage of cells in quiescence at each dose:
#Summarise the data:
anno$CellStatus <- sapply(anno$QS, function(x)
ifelse(x < 0, "Proliferating","Quiescent"))
Dose <- c(0,0,10,10,50,50,200,200)
CellStatus <- c("Proliferating","Quiescent","Proliferating","Quiescent","Proliferating","Quiescent","Proliferating","Quiescent")
N <- NULL
for (i in c(0,10,50,200)) {
print(i)
test <- anno[anno$df.gid %in% "SW480",]
test <- test[test$dose %in% i,]
test <- table(test$CellStatus)
n <- test[1]
N <- c(N,n)
n <- test[2]
N <- c(N,n)
}
Summary <- data.frame(Dose, CellStatus, N)
Summary$Dose <- factor(Summary$Dose, levels = c(0,10,50,200))
pdf("GSE149224_barplot_cell_composition_SW480.pdf", height = 5, width = 4)
p <- ggplot(Summary, aes(fill=CellStatus, y=N, x=Dose, width = 0.75)) +
geom_bar(stat = "identity", position = "fill") + theme_classic()
p + rotate_x_text(45) + scale_fill_manual(values = c("#666666", "#D95F02"))
dev.off()
###########################################
####UMAP ANALYSIS - SW480 cell line
#Select SW480 cells
anno_SW480 <- anno[anno$df.gid %in% "SW480",]
anno_SW480 <- as.character(rownames(anno_SW480))
expr.data_SW480 <- expr.data[,colnames(expr.data) %in% anno_SW480]
#Dose 0
anno_SW480 <- anno[anno$df.gid %in% "SW480",]
anno_SW480 <- anno_SW480[anno_SW480$dose %in% 0,]
anno_SW480 <- as.character(rownames(anno_SW480))
umap.expr <- expr.data_SW480[,colnames(expr.data_SW480) %in% anno_SW480]
umap.expr <- umap.expr[rownames(umap.expr) %in% c(downregulated_common, upregulated_common),]
umap.expr <- as.matrix(t(umap.expr))
common.umap = umap(umap.expr, random_state=123)
common.umap$layout
UMAP_coordinates <- data.frame(common.umap$layout)
colnames(UMAP_coordinates) <- c("UMAP1","UMAP2")
UMAP_coordinates$Sample <- rownames(UMAP_coordinates)
UMAP_coordinates_D0 <- merge(UMAP_coordinates, anno,
by.x = "Sample", by.y = "SampleID")
#Dose 10
anno_SW480 <- anno[anno$df.gid %in% "SW480",]
anno_SW480 <- anno_SW480[anno_SW480$dose %in% 10,]
anno_SW480 <- as.character(rownames(anno_SW480))
umap.expr <- expr.data_SW480[,colnames(expr.data_SW480) %in% anno_SW480]
umap.expr <- umap.expr[rownames(umap.expr) %in% c(downregulated_common, upregulated_common),]
umap.expr <- as.matrix(t(umap.expr))
common.umap = umap(umap.expr, random_state=123)
common.umap$layout
UMAP_coordinates <- data.frame(common.umap$layout)
colnames(UMAP_coordinates) <- c("UMAP1","UMAP2")
UMAP_coordinates$Sample <- rownames(UMAP_coordinates)
UMAP_coordinates_D10 <- merge(UMAP_coordinates, anno,
by.x = "Sample", by.y = "SampleID")
#Dose 50
anno_SW480 <- anno[anno$df.gid %in% "SW480",]
anno_SW480 <- anno_SW480[anno_SW480$dose %in% 50,]
anno_SW480 <- as.character(rownames(anno_SW480))
umap.expr <- expr.data_SW480[,colnames(expr.data_SW480) %in% anno_SW480]
umap.expr <- umap.expr[rownames(umap.expr) %in% c(downregulated_common, upregulated_common),]
umap.expr <- as.matrix(t(umap.expr))
common.umap = umap(umap.expr, random_state=123)
common.umap$layout
UMAP_coordinates <- data.frame(common.umap$layout)
colnames(UMAP_coordinates) <- c("UMAP1","UMAP2")
UMAP_coordinates$Sample <- rownames(UMAP_coordinates)
UMAP_coordinates_D50 <- merge(UMAP_coordinates, anno,
by.x = "Sample", by.y = "SampleID")
#Dose 200
anno_SW480 <- anno[anno$df.gid %in% "SW480",]
anno_SW480 <- anno_SW480[anno_SW480$dose %in% 200,]
anno_SW480 <- as.character(rownames(anno_SW480))
umap.expr <- expr.data_SW480[,colnames(expr.data_SW480) %in% anno_SW480]
umap.expr <- umap.expr[rownames(umap.expr) %in% c(downregulated_common, upregulated_common),]
umap.expr <- as.matrix(t(umap.expr))
common.umap = umap(umap.expr, random_state=123)
common.umap$layout
UMAP_coordinates <- data.frame(common.umap$layout)
colnames(UMAP_coordinates) <- c("UMAP1","UMAP2")
UMAP_coordinates$Sample <- rownames(UMAP_coordinates)
UMAP_coordinates_D200 <- merge(UMAP_coordinates, anno,
by.x = "Sample", by.y = "SampleID")
###Plot combined UMAP plots:
UMAP_coordinates <- rbind(UMAP_coordinates_D0, UMAP_coordinates_D10, UMAP_coordinates_D50, UMAP_coordinates_D200)
setwd("~/Documents/GitHub/CancerDormancy/Prognosis_and_treatment_response_analysis/Figures")
pdf("GSE149224_UMAP_SW480.pdf", height = 3, width = 9)
ggplot(UMAP_coordinates, aes(x=UMAP1, y=UMAP2, colour = QS)) +
geom_point() +
scale_color_gradient2(low = "#59ac53", midpoint = 0,mid = "grey95", high = "#8b5aa8") + theme_classic() + facet_wrap(~dose,nrow = 1)
dev.off()
#Percentage of cells in quiescence at each dose:
#Summarise the data:
anno$CellStatus <- sapply(anno$QS, function(x)
ifelse(x < 0, "Proliferating","Quiescent"))
Dose <- c(0,0,10,10,50,50,200,200)
CellStatus <- c("Proliferating","Quiescent","Proliferating","Quiescent","Proliferating","Quiescent","Proliferating","Quiescent")
N <- NULL
for (i in c(0,10,50,200)) {
print(i)
test <- anno[anno$df.gid %in% "SW480",]
test <- test[test$dose %in% i,]
test <- table(test$CellStatus)
n <- test[1]
N <- c(N,n)
n <- test[2]
N <- c(N,n)
}
Summary <- data.frame(Dose, CellStatus, N)
Summary$Dose <- factor(Summary$Dose, levels = c(0,10,50,200))
pdf("GSE149224_barplot_cell_composition_SW480.pdf", height = 5, width = 4)
p <- ggplot(Summary, aes(fill=CellStatus, y=N, x=Dose, width = 0.75)) +
geom_bar(stat = "identity", position = "fill") + theme_classic()
p + rotate_x_text(45) + scale_fill_manual(values = c("#666666", "#D95F02"))
dev.off()
