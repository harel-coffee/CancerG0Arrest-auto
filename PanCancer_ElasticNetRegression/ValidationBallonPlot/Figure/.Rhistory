#Record change in quiescence score
mean_change <- c(mean_change, change)
#record p value:
WT <- z_score[z_score$Mutation.status %in% "WT",]
MT <- z_score[z_score$Mutation.status %in% "MT",]
p <- 1
tryCatch({
res <- wilcox.test(WT$z_score, MT$z_score)
}, error=function(e){})
tryCatch({
p <- res$p.value
}, error=function(e){})
pvalue <- c(pvalue,p)
rm(res)
rm(p)
}
################AMPs:
for (a in test.amp) {
print(a)
cnv.samples <- CNV.data[CNV.data[[a]] %in% c(1,2,3,4,5),]
cnv.samples <- unique(as.character(cnv.samples$Sample))
z_score$Mutation.status <- sapply(z_score$sample, function(x)
ifelse(x %in% cnv.samples,"MT","WT"))
WT <- z_score[z_score$Mutation.status %in% "WT",]
WT <- mean(WT$z_score)
MT <- z_score[z_score$Mutation.status %in% "MT",]
MT <- mean(MT$z_score)
change <- MT - WT
#Record change in quiescence score
mean_change <- c(mean_change, change)
#record p value:
WT <- z_score[z_score$Mutation.status %in% "WT",]
MT <- z_score[z_score$Mutation.status %in% "MT",]
p <- 1
tryCatch({
res <- wilcox.test(WT$z_score, MT$z_score)
}, error=function(e){})
tryCatch({
p <- res$p.value
}, error=function(e){})
pvalue <- c(pvalue,p)
rm(res)
rm(p)
}
test.df.change$prad_mskcc <- mean_change
test.df.pval$prad_mskcc <- pvalue
#Merge with the original dataframe:
Difference_matrix <- merge(Difference_matrix, test.df.change,
by.x = "Features", by.y = "Features",all = TRUE)
Pvalue_matrix <- merge(Pvalue_matrix, test.df.pval,
by.x = "Features", by.y = "Features",all = TRUE)
###################################################################
####Dataset 8: prostate dkfz (maf only)
##Load the quiescence scores:
setwd("~/Documents/GitHub/CancerDormancy/Data/cBioPortal_Studies/QuiescenceScores/")
load("prostate_dkfz_2018_quiescence_score.RData")
z_score$sample <- rownames(z_score)
#Load maf file:
setwd("~/Documents/Dormancy_PhD_project_data/cbioportal_studies/RAW_data/Prostate/prostate_dkfz_2018/")
maf <- read.table("data_mutations_mskcc.txt",sep = "\t", header = TRUE)
####Look at samples which have reported mutations
snv.samples <- unique(as.character(maf$Tumor_Sample_Barcode))
z_score <- z_score[z_score$sample %in% snv.samples,]
#Check which genes can be checked:
test.snv <- Gene_annotation[Gene_annotation$Feature_type %in% "SNV",]
test.snv <- as.character(test.snv$Gene)
all.genes.snv <- unique(as.character(maf$Hugo_Symbol))
test.snv <- test.snv[test.snv %in% all.genes.snv]
Features <- c(paste(test.snv,"_SNV",sep = ""))
test.df.change <- data.frame(Features)
test.df.pval <- data.frame(Features)
mean_change <- NULL
pvalue <- NULL
################SNVs:
for (a in test.snv) {
print(a)
selected_maf <- maf[maf$Hugo_Symbol %in% a,]
selected_maf <- selected_maf[selected_maf$Variant_Classification %in% c("Frame_Shift_Del","Frame_Shift_Ins","In_Frame_Del","In_Frame_Ins","Missense_Mutation","Nonsense_Mutation","Nonstop_Mutation"),]
mutated_samples <- as.character(selected_maf$Tumor_Sample_Barcode)
mutated_samples <- unique(mutated_samples)
z_score$Mutation.status <- sapply(z_score$sample, function(x)
ifelse(x %in% mutated_samples,"MT","WT"))
WT <- z_score[z_score$Mutation.status %in% "WT",]
WT <- mean(WT$z_score)
MT <- z_score[z_score$Mutation.status %in% "MT",]
MT <- mean(MT$z_score)
change <- MT - WT
#Record change in quiescence score
mean_change <- c(mean_change, change)
#record p value:
WT <- z_score[z_score$Mutation.status %in% "WT",]
MT <- z_score[z_score$Mutation.status %in% "MT",]
p <- 1
tryCatch({
res <- wilcox.test(WT$z_score, MT$z_score)
}, error=function(e){})
tryCatch({
p <- res$p.value
}, error=function(e){})
pvalue <- c(pvalue,p)
rm(res)
rm(p)
}
test.df.change$prostate_dkfz_2018 <- mean_change
test.df.pval$prostate_dkfz_2018 <- pvalue
#Merge with the original dataframe:
Difference_matrix <- merge(Difference_matrix, test.df.change,
by.x = "Features", by.y = "Features",all = TRUE)
Pvalue_matrix <- merge(Pvalue_matrix, test.df.pval,
by.x = "Features", by.y = "Features",all = TRUE)
###################################################################
####Dataset 9: sarc mskcc (maf and cnv)
setwd("~/Documents/GitHub/CancerDormancy/Data/cBioPortal_Studies/QuiescenceScores/")
load("sarc_mskcc_quiescence_score.RData")
z_score$sample <- rownames(z_score)
#Load maf file:
setwd("~/Documents/Dormancy_PhD_project_data/cbioportal_studies/RAW_data/Soft_tissue/sarc_mskcc/")
maf <- read.table("data_mutations_mskcc.txt",sep = "\t", header = TRUE)
##CNV data
setwd("~/Documents/Dormancy_PhD_project_data/cbioportal_studies/RAW_data/Soft_tissue/sarc_mskcc/")
CNV.data <- read.table("data_CNA.txt",sep = "\t",header = TRUE)
rownames(CNV.data) <- CNV.data$Entrez_Gene_Id
CNV.data$Entrez_Gene_Id <- NULL
CNV.data <- data.frame(t(CNV.data))
rownames(CNV.data) <- gsub("\\.", "-", rownames(CNV.data))
CNV.data$Sample <- rownames(CNV.data)
#Change names of genes from entez to hugo
CNV.data$TP53 <- CNV.data$X7157
CNV.data$RB1 <- CNV.data$X5925
CNV.data$CDKN2A <- CNV.data$X1029
CNV.data$PTEN <- CNV.data$X5728
CNV.data$LRP1B <- CNV.data$X53353
CNV.data$ZMYM2 <- CNV.data$X7750
CNV.data$FHIT <- CNV.data$X2272
CNV.data$ZFHX3 <- CNV.data$X463
CNV.data$FSTL3 <- CNV.data$X10272
CNV.data$ATF1 <- CNV.data$X466
CNV.data$CYLD <- CNV.data$X1540
CNV.data$CCNB1IP1 <- CNV.data$X57820
CNV.data$SMAD4 <- CNV.data$X4089
CNV.data$SIRPA <- CNV.data$X140885
CNV.data$RECQL4 <- CNV.data$X9401
CNV.data$BCL3 <- CNV.data$X602
CNV.data$NCOR1 <- CNV.data$X9611
CNV.data$KLF6 <- CNV.data$X1316
CNV.data$MYC <- CNV.data$X4609
CNV.data$RAD21 <- CNV.data$X5885
CNV.data$LMNA <- CNV.data$X4000
CNV.data$CEP89 <- CNV.data$X84902
CNV.data$PRRX1 <- CNV.data$X5396
CNV.data$ETV6 <- CNV.data$X2120
CNV.data$PLAG1 <- CNV.data$X5324
CNV.data$ATF1 <- CNV.data$X466
CNV.data$SDHB <- CNV.data$X6390
####Look at samples which have reported mutations
snv.samples <- unique(as.character(maf$Tumor_Sample_Barcode))
cnv.samples <- unique(as.character(CNV.data$Sample))
z_score <- z_score[z_score$sample %in% c(snv.samples, cnv.samples),]
############
#Check which genes can be checked:
test.snv <- Gene_annotation[Gene_annotation$Feature_type %in% "SNV",]
test.snv <- as.character(test.snv$Gene)
all.genes.snv <- unique(as.character(maf$Hugo_Symbol))
test.snv <- test.snv[test.snv %in% all.genes.snv]
test.amp  <- Gene_annotation[Gene_annotation$Feature_type %in% "AMP",]
test.amp <- as.character(test.amp$Gene)
all.genes.cnv <- unique(as.character(colnames(CNV.data)))
test.amp <- test.amp[test.amp %in% all.genes.cnv]
test.del  <- Gene_annotation[Gene_annotation$Feature_type %in% "DEL",]
test.del <- as.character(test.del$Gene)
all.genes.del <- unique(as.character(colnames(CNV.data)))
test.del <- test.del[test.del %in% all.genes.cnv]
Features <- c(paste(test.snv,"_SNV",sep = ""),paste(test.del,"_DEL",sep = ""),paste(test.amp,"_AMP",sep = ""))
test.df.change <- data.frame(Features)
test.df.pval <- data.frame(Features)
mean_change <- NULL
pvalue <- NULL
################SNVs:
for (a in test.snv) {
print(a)
selected_maf <- maf[maf$Hugo_Symbol %in% a,]
selected_maf <- selected_maf[selected_maf$Variant_Classification %in% c("Frame_Shift_Ins","In_Frame_Ins","Missense_Mutation","Frame_Shift_Del","Nonsense_Mutation","In_Frame_Del","Nonstop_Mutation"),]
mutated_samples <- as.character(selected_maf$Tumor_Sample_Barcode)
mutated_samples <- unique(mutated_samples)
z_score$Mutation.status <- sapply(z_score$sample, function(x)
ifelse(x %in% mutated_samples,"MT","WT"))
WT <- z_score[z_score$Mutation.status %in% "WT",]
WT <- mean(WT$z_score)
MT <- z_score[z_score$Mutation.status %in% "MT",]
MT <- mean(MT$z_score)
change <- MT - WT
#Record change in quiescence score
mean_change <- c(mean_change, change)
#record p value:
WT <- z_score[z_score$Mutation.status %in% "WT",]
MT <- z_score[z_score$Mutation.status %in% "MT",]
p <- 1
tryCatch({
res <- wilcox.test(WT$z_score, MT$z_score)
}, error=function(e){})
tryCatch({
p <- res$p.value
}, error=function(e){})
pvalue <- c(pvalue,p)
rm(res)
rm(p)
}
################DELs:
for (a in test.del) {
print(a)
cnv.samples <- CNV.data[CNV.data[[a]] %in% c(-1,-2,-3,-4,-5),]
cnv.samples <- unique(as.character(cnv.samples$Sample))
z_score$Mutation.status <- sapply(z_score$sample, function(x)
ifelse(x %in% cnv.samples,"MT","WT"))
WT <- z_score[z_score$Mutation.status %in% "WT",]
WT <- mean(WT$z_score)
MT <- z_score[z_score$Mutation.status %in% "MT",]
MT <- mean(MT$z_score)
change <- MT - WT
#Record change in quiescence score
mean_change <- c(mean_change, change)
#record p value:
WT <- z_score[z_score$Mutation.status %in% "WT",]
MT <- z_score[z_score$Mutation.status %in% "MT",]
p <- 1
tryCatch({
res <- wilcox.test(WT$z_score, MT$z_score)
}, error=function(e){})
tryCatch({
p <- res$p.value
}, error=function(e){})
pvalue <- c(pvalue,p)
rm(res)
rm(p)
}
################AMPs:
for (a in test.amp) {
print(a)
cnv.samples <- CNV.data[CNV.data[[a]] %in% c(1,2,3,4,5),]
cnv.samples <- unique(as.character(cnv.samples$Sample))
z_score$Mutation.status <- sapply(z_score$sample, function(x)
ifelse(x %in% cnv.samples,"MT","WT"))
WT <- z_score[z_score$Mutation.status %in% "WT",]
WT <- mean(WT$z_score)
MT <- z_score[z_score$Mutation.status %in% "MT",]
MT <- mean(MT$z_score)
change <- MT - WT
#Record change in quiescence score
mean_change <- c(mean_change, change)
#record p value:
WT <- z_score[z_score$Mutation.status %in% "WT",]
MT <- z_score[z_score$Mutation.status %in% "MT",]
p <- 1
tryCatch({
res <- wilcox.test(WT$z_score, MT$z_score)
}, error=function(e){})
tryCatch({
p <- res$p.value
}, error=function(e){})
pvalue <- c(pvalue,p)
rm(res)
rm(p)
}
test.df.change$sarc_mskcc <- mean_change
test.df.pval$sarc_mskcc <- pvalue
#Merge with the original dataframe:
Difference_matrix <- merge(Difference_matrix, test.df.change,
by.x = "Features", by.y = "Features",all = TRUE)
Pvalue_matrix <- merge(Pvalue_matrix, test.df.pval,
by.x = "Features", by.y = "Features",all = TRUE)
###################################################################
####Dataset 10: Wt target 2018
#Load the quiescence scores:
setwd("~/Documents/GitHub/CancerDormancy/Data/cBioPortal_Studies/QuiescenceScores/")
load("wt_target_2018_pub_quiescence_score.RData")
z_score$sample <- rownames(z_score)
#Load maf file:
setwd("~/Documents/Dormancy_PhD_project_data/cbioportal_studies/RAW_data/Kidney/wt_target_2018_pub/")
maf <- read.table("data_mutations_mskcc.txt",sep = "\t", header = TRUE)
setwd("~/Documents/Dormancy_PhD_project_data/cbioportal_studies/RAW_data/Kidney/wt_target_2018_pub")
CNV.data <- read.table("data_CNA.txt",sep = "\t",header = TRUE)
rownames(CNV.data) <- CNV.data$Hugo_Symbol
CNV.data$Hugo_Symbol <- NULL
CNV.data$Entrez_Gene_Id <- NULL
CNV.data <- data.frame(t(CNV.data))
rownames(CNV.data) <- gsub("\\.", "-", rownames(CNV.data))
CNV.data$Sample <- rownames(CNV.data)
####Look at samples which have reported mutations
snv.samples <- unique(as.character(maf$Tumor_Sample_Barcode))
cnv.samples <- unique(as.character(CNV.data$Sample))
z_score <- z_score[z_score$sample %in% c(snv.samples, cnv.samples),]
############
#Check which genes can be checked:
test.snv <- Gene_annotation[Gene_annotation$Feature_type %in% "SNV",]
test.snv <- as.character(test.snv$Gene)
all.genes.snv <- unique(as.character(maf$Hugo_Symbol))
test.snv <- test.snv[test.snv %in% all.genes.snv]
test.amp  <- Gene_annotation[Gene_annotation$Feature_type %in% "AMP",]
test.amp <- as.character(test.amp$Gene)
all.genes.cnv <- unique(as.character(colnames(CNV.data)))
test.amp <- test.amp[test.amp %in% all.genes.cnv]
test.del  <- Gene_annotation[Gene_annotation$Feature_type %in% "DEL",]
test.del <- as.character(test.del$Gene)
all.genes.del <- unique(as.character(colnames(CNV.data)))
test.del <- test.del[test.del %in% all.genes.cnv]
Features <- c(paste(test.snv,"_SNV",sep = ""),paste(test.del,"_DEL",sep = ""),paste(test.amp,"_AMP",sep = ""))
test.df.change <- data.frame(Features)
test.df.pval <- data.frame(Features)
mean_change <- NULL
pvalue <- NULL
################SNVs:
for (a in test.snv) {
print(a)
selected_maf <- maf[maf$Hugo_Symbol %in% a,]
selected_maf <- selected_maf[selected_maf$Variant_Classification %in% c("Frame_Shift_Ins","In_Frame_Ins","Missense_Mutation","Frame_Shift_Del","Nonsense_Mutation","In_Frame_Del","Nonstop_Mutation"),]
mutated_samples <- as.character(selected_maf$Tumor_Sample_Barcode)
mutated_samples <- unique(mutated_samples)
z_score$Mutation.status <- sapply(z_score$sample, function(x)
ifelse(x %in% mutated_samples,"MT","WT"))
WT <- z_score[z_score$Mutation.status %in% "WT",]
WT <- mean(WT$z_score)
MT <- z_score[z_score$Mutation.status %in% "MT",]
MT <- mean(MT$z_score)
change <- MT - WT
#Record change in quiescence score
mean_change <- c(mean_change, change)
#record p value:
WT <- z_score[z_score$Mutation.status %in% "WT",]
MT <- z_score[z_score$Mutation.status %in% "MT",]
p <- 1
tryCatch({
res <- wilcox.test(WT$z_score, MT$z_score)
}, error=function(e){})
tryCatch({
p <- res$p.value
}, error=function(e){})
pvalue <- c(pvalue,p)
rm(res)
rm(p)
}
################DELs:
for (a in test.del) {
print(a)
cnv.samples <- CNV.data[CNV.data[[a]] %in% c(-1,-2,-3,-4,-5),]
cnv.samples <- unique(as.character(cnv.samples$Sample))
z_score$Mutation.status <- sapply(z_score$sample, function(x)
ifelse(x %in% cnv.samples,"MT","WT"))
WT <- z_score[z_score$Mutation.status %in% "WT",]
WT <- mean(WT$z_score)
MT <- z_score[z_score$Mutation.status %in% "MT",]
MT <- mean(MT$z_score)
change <- MT - WT
#Record change in quiescence score
mean_change <- c(mean_change, change)
#record p value:
WT <- z_score[z_score$Mutation.status %in% "WT",]
MT <- z_score[z_score$Mutation.status %in% "MT",]
p <- 1
tryCatch({
res <- wilcox.test(WT$z_score, MT$z_score)
}, error=function(e){})
tryCatch({
p <- res$p.value
}, error=function(e){})
pvalue <- c(pvalue,p)
rm(res)
rm(p)
}
################AMPs:
for (a in test.amp) {
print(a)
cnv.samples <- CNV.data[CNV.data[[a]] %in% c(1,2,3,4,5),]
cnv.samples <- unique(as.character(cnv.samples$Sample))
z_score$Mutation.status <- sapply(z_score$sample, function(x)
ifelse(x %in% cnv.samples,"MT","WT"))
WT <- z_score[z_score$Mutation.status %in% "WT",]
WT <- mean(WT$z_score)
MT <- z_score[z_score$Mutation.status %in% "MT",]
MT <- mean(MT$z_score)
change <- MT - WT
#Record change in quiescence score
mean_change <- c(mean_change, change)
#record p value:
WT <- z_score[z_score$Mutation.status %in% "WT",]
MT <- z_score[z_score$Mutation.status %in% "MT",]
p <- 1
tryCatch({
res <- wilcox.test(WT$z_score, MT$z_score)
}, error=function(e){})
tryCatch({
p <- res$p.value
}, error=function(e){})
pvalue <- c(pvalue,p)
rm(res)
rm(p)
}
test.df.change$wt_target_2018 <- mean_change
test.df.pval$wt_target_2018 <- pvalue
#Merge with the original dataframe:
Difference_matrix <- merge(Difference_matrix, test.df.change,
by.x = "Features", by.y = "Features",all = TRUE)
Pvalue_matrix <- merge(Pvalue_matrix, test.df.pval,
by.x = "Features", by.y = "Features",all = TRUE)
############################################
##Save the annotation
setwd("~/Documents/GitHub/CancerDormancy/PanCancer_ElasticNetRegression/ValidationBallonPlot/Results/")
#############
##Save the annotation
setwd("~/Documents/GitHub/CancerDormancy/PanCancer_ElasticNetRegression/ValidationBallonPlot/Results/")
save(Difference_matrix, file = "cBioPortal_difference_matrix.RData")
save(Pvalue_matrix, file = "cBioPortal_pvalue_matrix.RData")
############
##Load TCGA summary:
setwd("~/Documents/GitHub/CancerDormancy/PanCancer_ElasticNetRegression/ValidationBallonPlot/Results/")
load("TCGA_difference_matrix.RData")
load("TCGA_pvalue_marix.RData")
Difference_matrix_TCGA <- Difference_matrix
Pvalue_matrix_TCGA <- Pvalue_matrix
#########################
#Load external validation:
load("cBioPortal_difference_matrix.RData")
load("cBioPortal_pvalue_matrix.RData")
Difference_matrix_val <- Difference_matrix
Pvalue_matrix_val <- Pvalue_matrix
rm(Difference_matrix)
rm(Pvalue_matrix)
View(Difference_matrix_TCGA)
##############
#Combine the two:
rownames(Difference_matrix_TCGA) <- Difference_matrix_TCGA$CT
Difference_matrix_TCGA$CT <- NULL
rownames(Pvalue_matrix_TCGA) <- Pvalue_matrix_TCGA$CT
Pvalue_matrix_TCGA$CT <- NULL
rownames(Difference_matrix_val) <- Difference_matrix_val$Features
Difference_matrix_val$Features <- NULL
Difference_matrix_val <- data.frame(t(Difference_matrix_val))
rownames(Pvalue_matrix_val) <- Pvalue_matrix_val$Features
Pvalue_matrix_val$Features <- NULL
Pvalue_matrix_val <- data.frame(t(Pvalue_matrix_val))
View(Difference_matrix_TCGA)
View(Pvalue_matrix_TCGA)
############
##Load TCGA summary:
setwd("~/Documents/GitHub/CancerDormancy/PanCancer_ElasticNetRegression/ValidationBallonPlot/Results/")
load("TCGA_difference_matrix.RData")
load("TCGA_pvalue_marix.RData")
Difference_matrix_TCGA <- Difference_matrix
Pvalue_matrix_TCGA <- Pvalue_matrix
#########################
#Load external validation:
load("cBioPortal_difference_matrix.RData")
load("cBioPortal_pvalue_matrix.RData")
Difference_matrix_val <- Difference_matrix
Pvalue_matrix_val <- Pvalue_matrix
rm(Difference_matrix)
rm(Pvalue_matrix)
##############
#Combine the two:
rownames(Difference_matrix_TCGA) <- Difference_matrix_TCGA$solid_tumours
Difference_matrix_TCGA$solid_tumours <- NULL
rownames(Pvalue_matrix_TCGA) <- Pvalue_matrix_TCGA$solid_tumours
Pvalue_matrix_TCGA$solid_tumours <- NULL
rownames(Difference_matrix_val) <- Difference_matrix_val$Features
Difference_matrix_val$Features <- NULL
Difference_matrix_val <- data.frame(t(Difference_matrix_val))
rownames(Pvalue_matrix_val) <- Pvalue_matrix_val$Features
Pvalue_matrix_val$Features <- NULL
Pvalue_matrix_val <- data.frame(t(Pvalue_matrix_val))
View(Difference_matrix_TCGA)
View(Difference_matrix_val)
#Make sure features are in the same order
Difference_matrix_TCGA <- Difference_matrix_TCGA[,order(colnames(Difference_matrix_TCGA))]
Difference_matrix_val <- Difference_matrix_val[,order(colnames(Difference_matrix_val))]
Pvalue_matrix_TCGA <- Pvalue_matrix_TCGA[,order(colnames(Pvalue_matrix_TCGA))]
Pvalue_matrix_val <- Pvalue_matrix_val[,order(colnames(Pvalue_matrix_val))]
#Merge datafranes
Difference_matrix <- rbind(Difference_matrix_TCGA, Difference_matrix_val)
Pvalue_matrix <- rbind(Pvalue_matrix_TCGA, Pvalue_matrix_val)
Difference_matrix$CT <- rownames(Difference_matrix)
Pvalue_matrix$CT <- rownames(Pvalue_matrix)
View(Difference_matrix)
View(Pvalue_matrix)
#Remove nas
Difference_matrix[is.na(Difference_matrix)] <- 0
library(reshape)
##########
#Melt dataframes:
Difference_matrix <- melt(Difference_matrix, id.vars = "CT")
Pvalue_matrix <- melt(Pvalue_matrix, id.vars = "CT")
colnames(Difference_matrix) <- c("CancerType", "Gene", "QuiescenceScoreChange")
Difference_matrix$pvalue  <- Pvalue_matrix$value
Difference_matrix$pvalue <- as.numeric(as.character(Difference_matrix$pvalue))
Difference_matrix$pvalue[Difference_matrix$pvalue > 0.05] <- NA
Difference_matrix$minuslog10pval <- -log10(Difference_matrix$pvalue)
###Exlude the folloing cancer types (no significant hits)
exclude <- c("THYM","prostate_dkfz_2018","prad_broad","paad_qcmg_uq","PAAD","KICH","ESCA","CHOL")
CT <- unique(Difference_matrix$CancerType)
CT <- CT[!(CT %in% exclude)]
Difference_matrix <- Difference_matrix[Difference_matrix$CancerType %in% CT,]
Levels <- c("ACC","BLCA","BRCA","CESC","COAD","GBM","HNSC","KIRC","KIRP","LGG","LIHC","LUAD","LUSC","MESO","OV","PCPG","PRAD","READ","SARC","SKCM","STAD","TGCT","THCA","UCEC","UCS","UVM","BRCA_metabric","BRCA_smc","GIS031","mskcc_solit_2012","prad_mskcc","sarc_mskcc","wt_target_2018")
Levels <- rev(Levels)
Difference_matrix$CancerType <- factor(Difference_matrix$CancerType, levels = Levels)
library(ggplot2)
library(ggpubr)
setwd("~/Documents/GitHub/CancerDormancy/PanCancer_ElasticNetRegression/ValidationBallonPlot/Figure")
###Plot ballonplots:
setwd("~/Documents/GitHub/CancerDormancy/PanCancer_ElasticNetRegression/ValidationBallonPlot/Figure")
pdf("TCGA_cBioPortal_Ballonplot.pdf", height = 7,width = 14)
p <- ggballoonplot(Difference_matrix, x = "Gene", y = "CancerType",
size = "minuslog10pval", fill = "QuiescenceScoreChange", size.range = c(3,10))
p +  scale_fill_gradient2(low = "#40004B", high = "#00441B", mid = "#F7F7F7")
dev.off()
