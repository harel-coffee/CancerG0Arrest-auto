CS <- DDR[DDR$Process %in% "Chromosome segregation",]
CS <- as.character(CS$Gene.ID)
#Convert gene lists to ENSG:
human = useMart("ensembl", dataset="hsapiens_gene_ensembl", host = "useast.ensembl.org")
results<- getBM(attributes=c("ensembl_gene_id", "hgnc_symbol"), values=p53, mart=human, filters = "hgnc_symbol")
p53_ENSG <- results$ensembl_gene_id
results<- getBM(attributes=c("ensembl_gene_id", "hgnc_symbol"), values=Alt_NHEJ, mart=human, filters = "hgnc_symbol")
Alt_NHEJ_ENSG <- results$ensembl_gene_id
results<- getBM(attributes=c("ensembl_gene_id", "hgnc_symbol"), values=BER, mart=human, filters = "hgnc_symbol")
BER_ENSG <- results$ensembl_gene_id
results<- getBM(attributes=c("ensembl_gene_id", "hgnc_symbol"), values=FA, mart=human, filters = "hgnc_symbol")
FA_ENSG <- results$ensembl_gene_id
results<- getBM(attributes=c("ensembl_gene_id", "hgnc_symbol"), values=HR, mart=human, filters = "hgnc_symbol")
HR_ENSG <- results$ensembl_gene_id
results<- getBM(attributes=c("ensembl_gene_id", "hgnc_symbol"), values=FA, mart=human, filters = "hgnc_symbol")
FA_ENSG <- results$ensembl_gene_id
results<- getBM(attributes=c("ensembl_gene_id", "hgnc_symbol"), values=MMR, mart=human, filters = "hgnc_symbol")
MMR_ENSG <- results$ensembl_gene_id
results<- getBM(attributes=c("ensembl_gene_id", "hgnc_symbol"), values=NER, mart=human, filters = "hgnc_symbol")
NER_ENSG <- results$ensembl_gene_id
results<- getBM(attributes=c("ensembl_gene_id", "hgnc_symbol"), values=NHEJ, mart=human, filters = "hgnc_symbol")
NHEJ_ENSG <- results$ensembl_gene_id
results<- getBM(attributes=c("ensembl_gene_id", "hgnc_symbol"), values=TLS, mart=human, filters = "hgnc_symbol")
TLS_ENSG <- results$ensembl_gene_id
results<- getBM(attributes=c("ensembl_gene_id", "hgnc_symbol"), values=DR, mart=human, filters = "hgnc_symbol")
DR_ENSG <- results$ensembl_gene_id
results<- getBM(attributes=c("ensembl_gene_id", "hgnc_symbol"), values=CR, mart=human, filters = "hgnc_symbol")
CR_ENSG <- results$ensembl_gene_id
results<- getBM(attributes=c("ensembl_gene_id", "hgnc_symbol"), values=TM, mart=human, filters = "hgnc_symbol")
TM_ENSG <- results$ensembl_gene_id
results<- getBM(attributes=c("ensembl_gene_id", "hgnc_symbol"), values=CPF, mart=human, filters = "hgnc_symbol")
CPF_ENSG <- results$ensembl_gene_id
results<- getBM(attributes=c("ensembl_gene_id", "hgnc_symbol"), values=UR, mart=human, filters = "hgnc_symbol")
UR_ENSG <- results$ensembl_gene_id
results<- getBM(attributes=c("ensembl_gene_id", "hgnc_symbol"), values=CS, mart=human, filters = "hgnc_symbol")
CS_ENSG <- results$ensembl_gene_id
########Add columns to the Pancancer Samples dataframe indicating whether there are CN losses or deleterious SNVs in any of the DDR pathways
#p53
revelant_mutations <- snvs_selected[snvs_selected$Hugo_Symbol %in% p53,]
mutated_samples <- revelant_mutations$SampleID
mutated_samples <- unique(mutated_samples)
CN_loss_samples <- CNV[,colnames(CNV) %in% p53_ENSG]
for (i in colnames(CN_loss_samples)) {
CN_loss_samples[[i]] <- sapply(CN_loss_samples[[i]], function(x)
ifelse(x <= -1, 1,0))
}
CN_loss_samples$Total <- rowSums(CN_loss_samples)
CN_loss_samples <- CN_loss_samples[CN_loss_samples$Total >= 1,]
CN_loss_samples <- sapply(rownames(CN_loss_samples), function(x)
paste(strsplit(x,"-")[[1]][1:4],collapse="-"))
Pancancer_samples$p53 <- sapply(Pancancer_samples$SampleID, function(x)
ifelse(x %in% c(CN_loss_samples,mutated_samples), "MT","WT"))
#CPF
revelant_mutations <- snvs_selected[snvs_selected$Hugo_Symbol %in% CPF,]
mutated_samples <- revelant_mutations$SampleID
mutated_samples <- unique(mutated_samples)
CN_loss_samples <- CNV[,colnames(CNV) %in% CPF_ENSG]
for (i in colnames(CN_loss_samples)) {
CN_loss_samples[[i]] <- sapply(CN_loss_samples[[i]], function(x)
ifelse(x <= -1, 1,0))
}
CN_loss_samples$Total <- rowSums(CN_loss_samples)
CN_loss_samples <- CN_loss_samples[CN_loss_samples$Total >= 1,]
CN_loss_samples <- sapply(rownames(CN_loss_samples), function(x)
paste(strsplit(x,"-")[[1]][1:4],collapse="-"))
Pancancer_samples$CPF <- sapply(Pancancer_samples$SampleID, function(x)
ifelse(x %in% c(CN_loss_samples,mutated_samples), "MT","WT"))
#UR
revelant_mutations <- snvs_selected[snvs_selected$Hugo_Symbol %in% UR,]
mutated_samples <- revelant_mutations$SampleID
mutated_samples <- unique(mutated_samples)
CN_loss_samples <- CNV[,colnames(CNV) %in% UR_ENSG]
for (i in colnames(CN_loss_samples)) {
CN_loss_samples[[i]] <- sapply(CN_loss_samples[[i]], function(x)
ifelse(x <= -1, 1,0))
}
CN_loss_samples$Total <- rowSums(CN_loss_samples)
CN_loss_samples <- CN_loss_samples[CN_loss_samples$Total >= 1,]
CN_loss_samples <- sapply(rownames(CN_loss_samples), function(x)
paste(strsplit(x,"-")[[1]][1:4],collapse="-"))
Pancancer_samples$UR <- sapply(Pancancer_samples$SampleID, function(x)
ifelse(x %in% c(CN_loss_samples,mutated_samples), "MT","WT"))
#NER
revelant_mutations <- snvs_selected[snvs_selected$Hugo_Symbol %in% NER,]
mutated_samples <- revelant_mutations$SampleID
mutated_samples <- unique(mutated_samples)
CN_loss_samples <- CNV[,colnames(CNV) %in% NER_ENSG]
for (i in colnames(CN_loss_samples)) {
CN_loss_samples[[i]] <- sapply(CN_loss_samples[[i]], function(x)
ifelse(x <= -1, 1,0))
}
CN_loss_samples$Total <- rowSums(CN_loss_samples)
CN_loss_samples <- CN_loss_samples[CN_loss_samples$Total >= 1,]
CN_loss_samples <- sapply(rownames(CN_loss_samples), function(x)
paste(strsplit(x,"-")[[1]][1:4],collapse="-"))
Pancancer_samples$NER <- sapply(Pancancer_samples$SampleID, function(x)
ifelse(x %in% c(CN_loss_samples,mutated_samples), "MT","WT"))
#MMR
revelant_mutations <- snvs_selected[snvs_selected$Hugo_Symbol %in% MMR,]
mutated_samples <- revelant_mutations$SampleID
mutated_samples <- unique(mutated_samples)
CN_loss_samples <- CNV[,colnames(CNV) %in% MMR_ENSG]
for (i in colnames(CN_loss_samples)) {
CN_loss_samples[[i]] <- sapply(CN_loss_samples[[i]], function(x)
ifelse(x <= -1, 1,0))
}
CN_loss_samples$Total <- rowSums(CN_loss_samples)
CN_loss_samples <- CN_loss_samples[CN_loss_samples$Total >= 1,]
CN_loss_samples <- sapply(rownames(CN_loss_samples), function(x)
paste(strsplit(x,"-")[[1]][1:4],collapse="-"))
Pancancer_samples$MMR <- sapply(Pancancer_samples$SampleID, function(x)
ifelse(x %in% c(CN_loss_samples,mutated_samples), "MT","WT"))
#BER
revelant_mutations <- snvs_selected[snvs_selected$Hugo_Symbol %in% BER,]
mutated_samples <- revelant_mutations$SampleID
mutated_samples <- unique(mutated_samples)
CN_loss_samples <- CNV[,colnames(CNV) %in% BER_ENSG]
for (i in colnames(CN_loss_samples)) {
CN_loss_samples[[i]] <- sapply(CN_loss_samples[[i]], function(x)
ifelse(x <= -1, 1,0))
}
CN_loss_samples$Total <- rowSums(CN_loss_samples)
CN_loss_samples <- CN_loss_samples[CN_loss_samples$Total >= 1,]
CN_loss_samples <- sapply(rownames(CN_loss_samples), function(x)
paste(strsplit(x,"-")[[1]][1:4],collapse="-"))
Pancancer_samples$BER <- sapply(Pancancer_samples$SampleID, function(x)
ifelse(x %in% c(CN_loss_samples,mutated_samples), "MT","WT"))
#DR
revelant_mutations <- snvs_selected[snvs_selected$Hugo_Symbol %in% DR,]
mutated_samples <- revelant_mutations$SampleID
mutated_samples <- unique(mutated_samples)
CN_loss_samples <- CNV[,colnames(CNV) %in% DR_ENSG]
for (i in colnames(CN_loss_samples)) {
CN_loss_samples[[i]] <- sapply(CN_loss_samples[[i]], function(x)
ifelse(x <= -1, 1,0))
}
CN_loss_samples$Total <- rowSums(CN_loss_samples)
CN_loss_samples <- CN_loss_samples[CN_loss_samples$Total >= 1,]
CN_loss_samples <- sapply(rownames(CN_loss_samples), function(x)
paste(strsplit(x,"-")[[1]][1:4],collapse="-"))
Pancancer_samples$DR <- sapply(Pancancer_samples$SampleID, function(x)
ifelse(x %in% c(CN_loss_samples,mutated_samples), "MT","WT"))
#TM
revelant_mutations <- snvs_selected[snvs_selected$Hugo_Symbol %in% TM,]
mutated_samples <- revelant_mutations$SampleID
mutated_samples <- unique(mutated_samples)
CN_loss_samples <- CNV[,colnames(CNV) %in% TM_ENSG]
for (i in colnames(CN_loss_samples)) {
CN_loss_samples[[i]] <- sapply(CN_loss_samples[[i]], function(x)
ifelse(x <= -1, 1,0))
}
CN_loss_samples$Total <- rowSums(CN_loss_samples)
CN_loss_samples <- CN_loss_samples[CN_loss_samples$Total >= 1,]
CN_loss_samples <- sapply(rownames(CN_loss_samples), function(x)
paste(strsplit(x,"-")[[1]][1:4],collapse="-"))
Pancancer_samples$TM <- sapply(Pancancer_samples$SampleID, function(x)
ifelse(x %in% c(CN_loss_samples,mutated_samples), "MT","WT"))
#CS
revelant_mutations <- snvs_selected[snvs_selected$Hugo_Symbol %in% CS,]
mutated_samples <- revelant_mutations$SampleID
mutated_samples <- unique(mutated_samples)
CN_loss_samples <- CNV[,colnames(CNV) %in% CS_ENSG]
for (i in colnames(CN_loss_samples)) {
CN_loss_samples[[i]] <- sapply(CN_loss_samples[[i]], function(x)
ifelse(x <= -1, 1,0))
}
CN_loss_samples$Total <- rowSums(CN_loss_samples)
CN_loss_samples <- CN_loss_samples[CN_loss_samples$Total >= 1,]
CN_loss_samples <- sapply(rownames(CN_loss_samples), function(x)
paste(strsplit(x,"-")[[1]][1:4],collapse="-"))
Pancancer_samples$CS <- sapply(Pancancer_samples$SampleID, function(x)
ifelse(x %in% c(CN_loss_samples,mutated_samples), "MT","WT"))
#CR
revelant_mutations <- snvs_selected[snvs_selected$Hugo_Symbol %in% CR,]
mutated_samples <- revelant_mutations$SampleID
mutated_samples <- unique(mutated_samples)
CN_loss_samples <- CNV[,colnames(CNV) %in% CR_ENSG]
for (i in colnames(CN_loss_samples)) {
CN_loss_samples[[i]] <- sapply(CN_loss_samples[[i]], function(x)
ifelse(x <= -1, 1,0))
}
CN_loss_samples$Total <- rowSums(CN_loss_samples)
CN_loss_samples <- CN_loss_samples[CN_loss_samples$Total >= 1,]
CN_loss_samples <- sapply(rownames(CN_loss_samples), function(x)
paste(strsplit(x,"-")[[1]][1:4],collapse="-"))
Pancancer_samples$CR <- sapply(Pancancer_samples$SampleID, function(x)
ifelse(x %in% c(CN_loss_samples,mutated_samples), "MT","WT"))
#TLS
revelant_mutations <- snvs_selected[snvs_selected$Hugo_Symbol %in% TLS,]
mutated_samples <- revelant_mutations$SampleID
mutated_samples <- unique(mutated_samples)
CN_loss_samples <- CNV[,colnames(CNV) %in% TLS_ENSG]
for (i in colnames(CN_loss_samples)) {
CN_loss_samples[[i]] <- sapply(CN_loss_samples[[i]], function(x)
ifelse(x <= -1, 1,0))
}
CN_loss_samples$Total <- rowSums(CN_loss_samples)
CN_loss_samples <- CN_loss_samples[CN_loss_samples$Total >= 1,]
CN_loss_samples <- sapply(rownames(CN_loss_samples), function(x)
paste(strsplit(x,"-")[[1]][1:4],collapse="-"))
Pancancer_samples$TLS <- sapply(Pancancer_samples$SampleID, function(x)
ifelse(x %in% c(CN_loss_samples,mutated_samples), "MT","WT"))
#NHEJ
revelant_mutations <- snvs_selected[snvs_selected$Hugo_Symbol %in% NHEJ,]
mutated_samples <- revelant_mutations$SampleID
mutated_samples <- unique(mutated_samples)
CN_loss_samples <- CNV[,colnames(CNV) %in% NHEJ_ENSG]
for (i in colnames(CN_loss_samples)) {
CN_loss_samples[[i]] <- sapply(CN_loss_samples[[i]], function(x)
ifelse(x <= -1, 1,0))
}
CN_loss_samples$Total <- rowSums(CN_loss_samples)
CN_loss_samples <- CN_loss_samples[CN_loss_samples$Total >= 1,]
CN_loss_samples <- sapply(rownames(CN_loss_samples), function(x)
paste(strsplit(x,"-")[[1]][1:4],collapse="-"))
Pancancer_samples$NHEJ <- sapply(Pancancer_samples$SampleID, function(x)
ifelse(x %in% c(CN_loss_samples,mutated_samples), "MT","WT"))
#Alt-NHEJ
revelant_mutations <- snvs_selected[snvs_selected$Hugo_Symbol %in% Alt_NHEJ,]
mutated_samples <- revelant_mutations$SampleID
mutated_samples <- unique(mutated_samples)
CN_loss_samples <- CNV[,colnames(CNV) %in% Alt_NHEJ_ENSG]
for (i in colnames(CN_loss_samples)) {
CN_loss_samples[[i]] <- sapply(CN_loss_samples[[i]], function(x)
ifelse(x <= -1, 1,0))
}
CN_loss_samples$Total <- rowSums(CN_loss_samples)
CN_loss_samples <- CN_loss_samples[CN_loss_samples$Total >= 1,]
CN_loss_samples <- sapply(rownames(CN_loss_samples), function(x)
paste(strsplit(x,"-")[[1]][1:4],collapse="-"))
Pancancer_samples$Alt_NHEJ <- sapply(Pancancer_samples$SampleID, function(x)
ifelse(x %in% c(CN_loss_samples,mutated_samples), "MT","WT"))
#FA
revelant_mutations <- snvs_selected[snvs_selected$Hugo_Symbol %in% FA,]
mutated_samples <- revelant_mutations$SampleID
mutated_samples <- unique(mutated_samples)
CN_loss_samples <- CNV[,colnames(CNV) %in% FA_ENSG]
for (i in colnames(CN_loss_samples)) {
CN_loss_samples[[i]] <- sapply(CN_loss_samples[[i]], function(x)
ifelse(x <= -1, 1,0))
}
CN_loss_samples$Total <- rowSums(CN_loss_samples)
CN_loss_samples <- CN_loss_samples[CN_loss_samples$Total >= 1,]
CN_loss_samples <- sapply(rownames(CN_loss_samples), function(x)
paste(strsplit(x,"-")[[1]][1:4],collapse="-"))
Pancancer_samples$FA <- sapply(Pancancer_samples$SampleID, function(x)
ifelse(x %in% c(CN_loss_samples,mutated_samples), "MT","WT"))
#HR
revelant_mutations <- snvs_selected[snvs_selected$Hugo_Symbol %in% HR,]
mutated_samples <- revelant_mutations$SampleID
mutated_samples <- unique(mutated_samples)
CN_loss_samples <- CNV[,colnames(CNV) %in% HR]
for (i in colnames(CN_loss_samples)) {
CN_loss_samples[[i]] <- sapply(CN_loss_samples[[i]], function(x)
ifelse(x <= -1, 1,0))
}
CN_loss_samples$Total <- rowSums(CN_loss_samples)
CN_loss_samples <- CN_loss_samples[CN_loss_samples$Total >= 1,]
CN_loss_samples <- sapply(rownames(CN_loss_samples), function(x)
paste(strsplit(x,"-")[[1]][1:4],collapse="-"))
Pancancer_samples$HR <- sapply(Pancancer_samples$SampleID, function(x)
ifelse(x %in% c(CN_loss_samples,mutated_samples), "MT","WT"))
#initiatlise the variables:
p_value <- NULL
OR <- NULL
Upper_confidence_interval <- NULL
Lower_confidence_interval <- NULL
Pathways <- c("Alt_NHEJ", "BER", "FA","HR","MMR","NER","NHEJ","TLS", "DR","CR","TM","CPF","UR","p53","CS")
###Fisher's exact test
for (i in Pathways) {
test_table <- table(Pancancer_samples[[i]], Pancancer_samples$quiescence_group)
print(test_table)
test <- fisher.test(test_table)
p <- test$p.value
p_value <- c(p_value,p)
or <- test$estimate
OR <- c(OR, or)
down <- test$conf.int[1]
Lower_confidence_interval <- c(Lower_confidence_interval, down)
up <- test$conf.int[2]
Upper_confidence_interval <- c(Upper_confidence_interval, up)
}
Adjusted_p_value <- p.adjust(p_value, method = "BH")
setwd("~/Documents/GitHub/CancerDormancy/PanCancer_ElasticNetRegression/FeatureExploration/Results/")
Fishers_test_results <- data.frame(Pathways, OR, p_value, Adjusted_p_value, Lower_confidence_interval, Upper_confidence_interval)
save(Fishers_test_results, file = "FishersExactTest_DDRmutation_vs_quiescence.RData")
#Filter the results to include significant pathways only:
Fishers_test_results <- Fishers_test_results[Fishers_test_results$Adjusted_p_value < 0.05,]
Fishers_test_results$yaxis <- 1:12
#Plot the results:
setwd("~/Documents/GitHub/CancerDormancy/PanCancer_ElasticNetRegression/FeatureExploration/Figures/")
#Plot the results:
setwd("~/Documents/GitHub/CancerDormancy/PanCancer_ElasticNetRegression/FeatureExploration/Figures/")
pdf("FishersExactTest_DDRmutation_vs_quiescence", width = 3, height = 3)
p <-ggplot(Fishers_test_results, aes(x = OR, y = yaxis))
p + geom_vline(aes(xintercept = 1), size = .25, linetype = "dashed") +
geom_errorbarh(aes(xmax = Upper_confidence_interval, xmin = Lower_confidence_interval), size = .5, height = .2, color = "gray50") +
geom_point(size = 1, color = "darkorange") +
theme_classic() +
theme(panel.grid.minor = element_blank()) +
scale_y_continuous(breaks = Fishers_test_results$yaxis, labels = Fishers_test_results$Pathways) +
scale_x_continuous(limits = c(0.5,1.5))+
ylab("") +
xlab("Odds ratio")
dev.off()
#Load required R packages:
library(GSVA)
library(pheatmap)
#Load required packages:
library(ggpubr)
#Load and combine the different quiescence scores
setwd("~/Documents/GitHub/CancerDormancy/Data/TCGA_QuiescenceScores/")
load("TCGA_common_QS_purity_scaled.RData")
combined.scores <- z_score
combined.scores$common <- combined.scores$z_score
combined.scores$z_score <- NULL
load("TCGA_CDK_inhibition_QS_purity_scaled.RData")
combined.scores$cdk <- z_score$z_score
load("TCGA_contact_inhibition_QS_purity_scaled.RData")
combined.scores$contact <- z_score$z_score
load("TCGA_MEK_inhibition_QS_purity_scaled.RData")
combined.scores$mek <- z_score$z_score
load("TCGA_serum_starvation_QS_purity_scaled.RData")
combined.scores$serum <- z_score$z_score
load("TCGA_spotaneous_quiescence_QS_purity_scaled.RData")
combined.scores$spontaneous <- z_score$z_score
combined.scores <- combined.scores[combined.scores$common > 0,]
#Save cancer type annotation:
CT <- combined.scores$CancerType
Barcodes <- rownames(combined.scores)
CT<- data.frame(CT,Barcodes)
combined.scores$CancerType <- NULL
combined.scores$common <- NULL
##Initially identify quiescence type with the highest quiescence score
#This will be the preliminary classification prior to determining uncertain samples
combined.scores$QuiescneceType <- colnames(combined.scores)[apply(combined.scores,1,which.max)]
table(combined.scores$QuiescneceType)
cdk <- combined.scores[combined.scores$QuiescneceType %in% "cdk",]
Uncertainty <- NULL
for (i in rownames(cdk)) {
test.data <- combined.scores[rownames(combined.scores) %in% i,]
mean <- test.data$cdk
values <- c(test.data$contact, test.data$mek, test.data$serum, test.data$spontaneous)
test <- t.test(values, mu = mean,
alternative = "less")
pval <- test$p.value
Uncertainty <- c(Uncertainty, pval)
}
Uncertainty <- data.frame(Uncertainty)
rownames(Uncertainty) <- rownames(cdk)
Uncertainty <- Uncertainty[Uncertainty$Uncertainty < 0.05,]
Uncertainty <- as.character(rownames(Uncertainty))
cdk <- combined.scores[combined.scores$QuiescneceType %in% "cdk",]
Uncertainty2 <- cdk[cdk$cdk < 1,]
Uncertainty2 <- as.character(rownames(Uncertainty2))
cdk$QuiescneceType <- sapply(rownames(cdk), function(x)
ifelse(x %in% c(Uncertainty,Uncertainty2),"Uncertain","cdk"))
table(cdk$QuiescneceType)
#Contact inhibition
contact <- combined.scores[combined.scores$QuiescneceType %in% "contact",]
Uncertainty <- NULL
for (i in rownames(contact)) {
test.data <- combined.scores[rownames(combined.scores) %in% i,]
mean <- test.data$contact
values <- c(test.data$cdk, test.data$mek, test.data$serum, test.data$spontaneous)
test <- t.test(values, mu = mean,
alternative = "less")
pval <- test$p.value
Uncertainty <- c(Uncertainty, pval)
}
Uncertainty <- data.frame(Uncertainty)
rownames(Uncertainty) <- rownames(contact)
Uncertainty <- Uncertainty[Uncertainty$Uncertainty < 0.05,]
Uncertainty <- as.character(rownames(Uncertainty))
contact <- combined.scores[combined.scores$QuiescneceType %in% "contact",]
Uncertainty2 <- contact[contact$contact < 1,]
Uncertainty2 <- as.character(rownames(Uncertainty2))
contact$QuiescneceType <- sapply(rownames(contact), function(x)
ifelse(x %in% c(Uncertainty,Uncertainty2),"Uncertain","contact"))
table(contact$QuiescneceType)
##MEK inhibition
mek <- combined.scores[combined.scores$QuiescneceType %in% "mek",]
Uncertainty <- NULL
for (i in rownames(mek)) {
test.data <- combined.scores[rownames(combined.scores) %in% i,]
mean <- test.data$mek
values <- c(test.data$cdk, test.data$contact, test.data$serum, test.data$spontaneous)
test <- t.test(values, mu = mean,
alternative = "less")
pval <- test$p.value
Uncertainty <- c(Uncertainty, pval)
}
Uncertainty <- data.frame(Uncertainty)
rownames(Uncertainty) <- rownames(mek)
Uncertainty <- Uncertainty[Uncertainty$Uncertainty < 0.05,]
Uncertainty <- as.character(rownames(Uncertainty))
mek <- combined.scores[combined.scores$QuiescneceType %in% "mek",]
Uncertainty2 <- mek[mek$mek < 1,]
Uncertainty2 <- as.character(rownames(Uncertainty2))
mek$QuiescneceType <- sapply(rownames(mek), function(x)
ifelse(x %in% c(Uncertainty,Uncertainty2),"Uncertain","mek"))
table(mek$QuiescneceType)
#Serum starvation
serum <- combined.scores[combined.scores$QuiescneceType %in% "serum",]
Uncertainty <- NULL
for (i in rownames(serum)) {
test.data <- combined.scores[rownames(combined.scores) %in% i,]
mean <- test.data$serum
values <- c(test.data$cdk, test.data$contact, test.data$mek, test.data$spontaneous)
test <- t.test(values, mu = mean,
alternative = "less")
pval <- test$p.value
Uncertainty <- c(Uncertainty, pval)
}
Uncertainty <- data.frame(Uncertainty)
rownames(Uncertainty) <- rownames(serum)
Uncertainty <- Uncertainty[Uncertainty$Uncertainty < 0.05,]
Uncertainty <- as.character(rownames(Uncertainty))
serum <- combined.scores[combined.scores$QuiescneceType %in% "serum",]
Uncertainty2 <- serum[serum$serum < 1,]
Uncertainty2 <- as.character(rownames(Uncertainty2))
serum$QuiescneceType <- sapply(rownames(serum), function(x)
ifelse(x %in% c(Uncertainty,Uncertainty2),"Uncertain","serum"))
table(serum$QuiescneceType)
#Spontaneous quiescence
spontaneous <- combined.scores[combined.scores$QuiescneceType %in% "spontaneous",]
Uncertainty <- NULL
for (i in rownames(spontaneous)) {
test.data <- combined.scores[rownames(combined.scores) %in% i,]
mean <- test.data$spontaneous
values <- c(test.data$cdk, test.data$contact, test.data$mek, test.data$serum)
test <- t.test(values, mu = mean,
alternative = "less")
pval <- test$p.value
Uncertainty <- c(Uncertainty, pval)
}
Uncertainty <- data.frame(Uncertainty)
rownames(Uncertainty) <- rownames(spontaneous)
Uncertainty <- Uncertainty[Uncertainty$Uncertainty < 0.05,]
Uncertainty <- as.character(rownames(Uncertainty))
spontaneous <- combined.scores[combined.scores$QuiescneceType %in% "spontaneous",]
Uncertainty2 <- spontaneous[spontaneous$spontaneous < 1,]
Uncertainty2 <- as.character(rownames(Uncertainty2))
spontaneous$QuiescneceType <- sapply(rownames(spontaneous), function(x)
ifelse(x %in% c(Uncertainty,Uncertainty2),"Uncertain","spontaneous"))
table(spontaneous$QuiescneceType)
#Combine the results
combined.scores <- rbind(contact, cdk, mek, serum, spontaneous)
#######Summarise the information (for each cancer type)
combined.scores$Barcodes <- rownames(combined.scores)
combined.scores <- merge(combined.scores, CT,
by.x = "Barcodes", by.y = "Barcodes")
table(combined.scores$QuiescneceType)
combined.scores$CancerType <- combined.scores$CT
CT <- unique(as.character(combined.scores$CancerType))
a <- "GBM"
selected.cancer <- combined.scores[combined.scores$CancerType %in% a,]
QuiescenceTypes <- c("cdk","contact","mek","serum","spontaneous","Uncertain")
N <- NULL
for (i in QuiescenceTypes) {
print(i)
selected.type <- selected.cancer[selected.cancer$QuiescneceType %in% i,]
n <- dim(selected.type)[1]
N <- c(N,n)
}
CancerType <- rep(a, 6)
Summary <- data.frame(CancerType, QuiescenceTypes, N)
CT <- CT[-1]
for (a in CT) {
print(a)
selected.cancer <- combined.scores[combined.scores$CancerType %in% a,]
QuiescenceTypes <- c("cdk","contact","mek","serum","spontaneous","Uncertain")
N <- NULL
for (i in QuiescenceTypes) {
print(i)
selected.type <- selected.cancer[selected.cancer$QuiescneceType %in% i,]
n <- dim(selected.type)[1]
N <- c(N,n)
}
CancerType <- rep(a, 6)
Summary_new <- data.frame(CancerType, QuiescenceTypes, N)
Summary <- rbind(Summary, Summary_new)
}
Summary$QuiescenceTypes <- factor(Summary$QuiescenceTypes, levels = c("Uncertain","cdk","contact","mek","serum","spontaneous"))
###Order cancer types according to % uncertainty
CT <- unique(as.character(Summary$CancerType))
Uncertain <- NULL
Percentage <- NULL
for (a in CT) {
print(a)
test <- Summary[Summary$CancerType %in% a,]
total <- sum(test$N)
test <- test[test$QuiescenceTypes %in% "Uncertain",]
Uncertain <- test$N
percentage <- Uncertain / total
print(percentage)
Percentage <- c(Percentage, percentage)
}
Percentages <- data.frame(CT, Percentage)
Percentages <- Percentages[order(Percentages$Percentage),]
CT <- as.character(Percentages$CT)
Summary$CancerType <- factor(Summary$CancerType,levels = CT)
setwd("~/Documents/GitHub/CancerDormancy/QuiescenceTypeClassification/TCGA_classification/Figures")
#Plot the classification summary:
setwd("~/Documents/GitHub/CancerDormancy/QuiescenceTypeClassification/TCGA_classification/Figures")
#Plot the classification summary:
setwd("~/Documents/GitHub/CancerDormancy/QuiescenceTypeClassification/TCGA_classification/Figures")
pdf("TCGA_QuiescenceTypeClassification.pdf", height = 5, width = 10)
p <- ggplot(Summary, aes(fill=QuiescenceTypes, y=N, x=CancerType, width = 0.7)) +
geom_bar(stat = "identity", position = "fill") + theme_classic()
p + rotate_x_text(45) + scale_fill_manual(values = c("#666666", "#D95F02", "#7570B3", "#E7298A", "#E6AB02", "#1B9E77"))
dev.off()
