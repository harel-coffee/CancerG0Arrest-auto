#SigProfiler
library("reticulate")
use_python("path_to_your_python")
py_config()
#install_github("AlexandrovLab/SigProfilerExtractorR")
#install_github("AlexandrovLab/SigProfilerMatrixGeneratorR")
library("SigProfilerExtractorR")
library("SigProfilerMatrixGeneratorR")
install("GRCh37")
#Now the data is ready for phate
library(phateR)
install.packages('devtools') #assuming it is not already installed
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
updateR(admin_password = 'Liptonmarrio')
Liptonmarrio
install.packages(as.vector(needed_packages))
#Load the required packages:
library(ggplot2)
install.packages("doParallel")
library(doParallel)
library(mclust)
library(cluster)
install.packages("TSP")
library(TSP)
install.packages("TSP")
install.packages("TSP")
library("devtools")
install_github("mhahsler/TSP")
devtools::install_github("r-lib/pkgbuild")
install.packages("TSP")
getOption('repos')
install.packages('TSP', repo='http://nbcgib.uesc.br/mirrors/cran/')
install.packages('TSP', repo='http://cran.csn.Berkeley.edu/')
install.packages('TSP', repo='http://cran.csn.Berkeley.edu')
install.Rtools(choose_version = TRUE, check = FALSE, GUI = TRUE,
page_with_download_url = "https://cran.r-project.org/bin/windows/Rtools/")
install.packages('installr')
install.packages("TSP")
install.packages("TSP", type = "source")
library(TSP)
install.packages("TSP")
#https://www.analyticsvidhya.com/blog/2017/02/introduction-to-ensembling-along-with-implementation-in-r/
#Loading the required libraries
library('caret')
#Seeting the random seed
set.seed(1)
#Loading the hackathon dataset
data<-read.csv(url('https://datahack-prod.s3.ap-south-1.amazonaws.com/train_file/train_u6lujuX_CVtuZ9i.csv'))
View(data)
dpois(x = 3, lambda = 5)
dpois(x = 0:12, lambda = 5)
barplot(dpois(0:12, 5), names.arg = 0:12, col = "red")
rbinom(15, prob = 0.5, size = 1)
rbinom(1, prob = 5e-4, size = 10000)
simulations = rbinom(n = 300000, prob = 5e-4, size = 10000)
barplot(table(simulations), col = "lavender")
probabilities = dpois(0:15, prob = 0.5, size = 100)
head(DNase)
plot(DNase$conc, DNase$density)
plot(DNase$conc, DNase$density,
ylab = attr(DNase, "labels")$y,
xlab = paste(attr(DNase, "labels")$x, attr(DNase, "units")$x),
pch = 3,
col = "blue")
test<- DNase
View(test)
attr(DNase, "labels")
library("Hiiragi2013")
install.packages("Hiiragi2013")
library(hrbrthemes)
install.packages("hrbrthemes")
library(hrbrthemes)
library(gdtools)
install.packages(gdtools)
install.packages("gdtools")
library(gdtools)
install.packages("hrbrthemes")
library(hrbrthemes)
library(ConsensusTME)
rawMethodSignatures <- ConsensusTME::methodSignatures
matchedSigs <- ConsensusTME::matchGeneSigs(rawMethodSignatures)
ConsensusTME::buildConsensusGenes(matchedSigs)
test <- ConsensusTME::buildConsensusGenes(matchedSigs)
test$UVM
test$BLCA
test$BRCA
#install packages:
install.packages("phateR")
install.packages("phateR")
install.packages("umap")
library(BiocManager)
install("maftools")
install("TCGAbiolinks")
install("ConsensusClusterPlus")
install("M3C")
install("sva")
library(devtools)
install_github("vqv/ggbiplot")
#Load packages
library(cowplot)
library(ggplot2)
#####
#4M1
#####
#Simulate observed heights from the prior
n <- 10000
mu <- rnorm(n, 0, 10)
sigma <- rexp(n, 2)
y_prior <- rnorm(n, mu, sigma)
dens(y_prior)
library(rethinking)
dens(y_prior)
sigma
N <- 1000
a <- rnorm( N, 120, 20 )
b <- rnorm( N, 0, 10 )
sigma <- runif( N, 0, 50 )
###predicted height distribution (1st year)
height_0 <- rnorm( N, a + b * 0, sigma )
dens( height_0 )
########
##Load !Kung data:
library(rethinking)
data(Howell1)
d <- Howell1
Individual <- c(1,2,3,4,5)
weight <- c(46.95,43.72,64.78,32.59,54.63)
predictions_df <- data.frame(Individual,weight)
View(predictions_df)
# define the average weight, x-bar
xbar <- mean(d$weight)
#Quadratic approximation of posterior distribution:
h4.1<- quap( alist(
height ~ dnorm( mu , sigma ) ,
mu <- a + b*(weight - xbar),
a ~ dnorm(178,20),
b ~ dlnorm(0,1),
sigma(0,50)
) ,
data=d )
#1:
########
#Load !Kung data:
library(rethinking)
data(Howell1)
d <- Howell1
#predictions df:
Individual <- c(1,2,3,4,5)
weights <- c(46.95,43.72,64.78,32.59,54.63)
predictions_df <- data.frame(Individual,weight)
predictions_df <- data.frame(Individual,weights)
# define the average weight, x-bar
xbar <- mean(d$weight)
#Quadratic approximation of posterior distribution:
h4.1<- quap(
alist(
height ~ dnorm( mu , sigma ) ,
mu <- a + b*(weight - xbar),
a ~ dnorm(178,20),
b ~ dlnorm(0,1),
sigma(0,50)
) ,
data=d )
#Quadratic approximation of posterior distribution:
h4.1 <- quap(
alist(
height ~ dnorm( mu , sigma ) ,
mu <- a + b*(weight - xbar),
a ~ dnorm(178,20),
b ~ dlnorm(0,1),
sigma(0,50)
) ,
data=d )
#Quadratic approximation of posterior distribution:
h4.1 <- quap(
alist(
height ~ dnorm( mu , sigma ) ,
mu <- a + b*(weight - xbar),
a ~ dnorm(178,20),
b ~ dlnorm(0,1),
sigma(0,50)
) ,
data=d )
h4.1 <- quap(
alist(
height ~ dnorm( mu , sigma ),
mu <- a + b*(weight - xbar),
a ~ dnorm(178,20),
b ~ dlnorm(0,1),
sigma(0,50)
) ,
data=d )
h4.1 <- quap(
alist(
height <- dnorm(mu, sigma),
mu <- a + b*(weight - xbar),
a ~ dnorm(178,20),
b ~ dlnorm(0,1),
sigma ~ dunif(0,50)
),
data = s
)
h4.1 <- quap(
alist(
height <- dnorm(mu, sigma),
mu <- a + b*(weight - xbar),
a ~ dnorm(178,20),
b ~ dlnorm(0,1),
sigma ~ dunif(0,50)
),
data = d
)
#Insepct posterior distribution of parameters:
precis(h4.1)
###Sampling from the posterior:
post <- extract.samples(h4.1)
post
mu_at_weight <- post$a + post$b * ( 50 - xbar )
mu_at_weight
mu <- link( h4.1 , data=data.frame(weight=weights) )
str(mu)
mu
###predict height mu for each of the weights:
post <- extract.samples(h4.1)
post
mu.link <- function(weight) post$a + post$b*( weight - xbar )
weight.seq <- weights
weight.seq <- c(46.95,43.72,64.78,32.59,54.63)
mu <- sapply( weight.seq , mu.link )
mu.mean <- apply( mu , 2 , mean )
mu.CI <- apply( mu , 2 , PI , prob=0.89 )
mu.mean
mu.CI
#######H2:
#select samples with ages <18
d2 <- d[ d$age < 18, ]
xbar <- mean( d2$weight )
##Use the same model as in H1  but lower mean heigh expectation:
h4.2 <- quap(
alist(
height <- dnorm(mu, sigma),
mu <- a + b*(weight - xbar),
a ~ dnorm(150,20),
b ~ dlnorm(0,1),
sigma ~ dunif(0,50)
),
data = d2
)
precis(h4.2)
summary(d2$weight)
weight.seq <- seq(from=4, to=45, length.out = 30) #weight ranges from 4 to 45
post <- extract.samples(h4.3)
post <- extract.samples(h4.2)
mu <- link( h4,2, data = list(weight = weight.seq))
mu <- link( h4.2, data = list(weight = weight.seq))
mu
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI, prob=0.89)
mu.mean
mu.PI
sim.height <- sim( h4.2, data = list(weight = weight.seq ))
sim.height
height.PI <- apply(sim.height, 2, PI, prob=0.89)
height.PI
# plot raw data
plot( height ~ weight , d2 , col=col.alpha(rangi2,0.5) )
# draw MAP line
lines( weight.seq , mu.mean )
# draw HPDI region for line
shade( mu.HPDI , weight.seq )
# draw PI region for simulated heights
shade( height.PI , weight.seq )
# draw HPDI region for line
shade( mu,PI , weight.seq )
# draw HPDI region for line
shade( mu.PI , weight.seq )
library(rethinking)
###################
#######H2:
##################
#select samples with ages <18
d2 <- d[ d$age < 18, ]
library(rethinking)
#1:
########
#Load !Kung data:
library(rethinking)
data(Howell1)
d <- Howell1
###################
#######H2:
##################
#select samples with ages <18
d2 <- d[ d$age < 18, ]
xbar <- mean( d2$weight )
mean(d2$height)
###SECTION A:
##Use the same model as in H1  but lower mean height expectation:
h4.2 <- quap(
alist(
height <- dnorm(mu, sigma),
mu <- a + b*(weight - xbar),
a ~ dnorm(110,20),
b ~ dlnorm(0,1),
sigma ~ dunif(0,50)
),
data = d2
)
precis(h4.2)
#Sample from the posterior
weight.seq <- seq(from=4, to=45, length.out = 30) #weight ranges from 4 to 45
post <- extract.samples(h4.2) #each row = line
post
post[1:,1:3]
post[1:5,1:3]
#predict mu
mu <- link( h4.2, data = list(weight = weight.seq))
mu
mu[1:10,1:10]
mu[1:10,1:5]
mu.mean <- apply(mu, 2, mean)
mu.mean
mu.mean
mu.PI <- apply(mu, 2, PI, prob=0.89)
mu.PI
#89% prediction interval (takes into account uncertaintly around sigma)
sim.height <- sim( h4.2, data = list(weight = weight.seq ))
sim.height
sim.height[1:5,1:5]
sim.height[1:5,1:3]
sim.height[1:5,1:5]
height.PI <- apply(sim.height, 2, PI, prob=0.89)
height.PI[1:5,1:5]
height.PI
# plot raw data
plot( height ~ weight , d2 , col=col.alpha(rangi2,0.5) )
# draw MAP line
lines( weight.seq , mu.mean )
# draw HPDI region for line
shade( mu.PI , weight.seq )
# draw PI region for simulated heights
shade( height.PI , weight.seq )
library(rethinking)
#1:
########
#Load !Kung data:
library(rethinking)
data(Howell1)
d <- Howell1
###################
#######H2:
##################
#select samples with ages <18
d2 <- d[ d$age < 18, ]
#define the average weight
xbar <- mean( d2$weight )
###########
#SECTION A:
###########
##Use the same model as in H1  but lower mean height expectation:
h4.2 <- quap(
alist(
height <- dnorm(mu, sigma),
mu <- a + b*(weight - xbar),
a ~ dnorm(110,20),
b ~ dlnorm(0,1),
sigma ~ dunif(0,50)
),
data = d2
)
precis(h4.2)
#Sample from the posterior
weight.seq <- seq(from=4, to=45, length.out = 30) #weight ranges from 4 to 45
post <- extract.samples(h4.2) #each row = line
post[1:5,1:3]
#predict mu for each weight point
mu <- link( h4.2, data = list(weight = weight.seq))
mu[1:10,1:5]
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI, prob=0.89)
#89% prediction interval (takes into account uncertaintly around sigma)
sim.height <- sim( h4.2, data = list(weight = weight.seq ))
sim.height[1:5,1:5]
height.PI <- apply(sim.height, 2, PI, prob=0.89)
height.PI
# plot raw data
plot( height ~ weight , d2 , col=col.alpha(rangi2,0.5) )
# draw MAP line
lines( weight.seq , mu.mean )
# draw HPDI region for line
shade( mu.PI , weight.seq )
# draw PI region for simulated heights
shade( height.PI , weight.seq )
library(rethinking)
#1:
########
#Load !Kung data:
library(rethinking)
data(Howell1)
d <- Howell1
View(d)
setwd("~/Documents/GitHub/CancerDormancy/Data/TCGA_QuiescenceScores")
load("TCGA_common_QS_purity_scaled.RData")
test1 <- z_score
load("TCGA_common_QS_and_kmeans_clusters.RData")
View(test1)
View(z_score)
View(test1)
View(z_score)
View(test1)
View(z_score)
View(test1)
